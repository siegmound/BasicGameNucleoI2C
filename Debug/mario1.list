
mario1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000464c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f0  080049f0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200000b0  08004aa8  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004aa8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c827  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d24  00000000  00000000  0002c907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002e630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0002f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223fd  00000000  00000000  0002fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e345  00000000  00000000  00051ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc56a  00000000  00000000  00060342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c8ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  0012c8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001300fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00130120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004804 	.word	0x08004804

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08004804 	.word	0x08004804

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HD44780_Init>:
		0b01110,
		0b11011
};

void HD44780_Init(uint8_t rows)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80005be:	4a44      	ldr	r2, [pc, #272]	; (80006d0 <HD44780_Init+0x11c>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005c4:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <HD44780_Init+0x120>)
 80005c6:	2208      	movs	r2, #8
 80005c8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80005ca:	4b43      	ldr	r3, [pc, #268]	; (80006d8 <HD44780_Init+0x124>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005d0:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <HD44780_Init+0x11c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d907      	bls.n	80005e8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005d8:	4b3f      	ldr	r3, [pc, #252]	; (80006d8 <HD44780_Init+0x124>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <HD44780_Init+0x124>)
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e006      	b.n	80005f6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005e8:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <HD44780_Init+0x124>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <HD44780_Init+0x124>)
 80005f4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005f6:	f000 f9b7 	bl	8000968 <DelayInit>
  HAL_Delay(50);
 80005fa:	2032      	movs	r0, #50	; 0x32
 80005fc:	f001 f870 	bl	80016e0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <HD44780_Init+0x120>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f975 	bl	80008f4 <ExpanderWrite>
  HAL_Delay(1000);
 800060a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060e:	f001 f867 	bl	80016e0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000612:	2030      	movs	r0, #48	; 0x30
 8000614:	f000 f95c 	bl	80008d0 <Write4Bits>
  DelayUS(4500);
 8000618:	f241 1094 	movw	r0, #4500	; 0x1194
 800061c:	f000 f9ce 	bl	80009bc <DelayUS>

  Write4Bits(0x03 << 4);
 8000620:	2030      	movs	r0, #48	; 0x30
 8000622:	f000 f955 	bl	80008d0 <Write4Bits>
  DelayUS(4500);
 8000626:	f241 1094 	movw	r0, #4500	; 0x1194
 800062a:	f000 f9c7 	bl	80009bc <DelayUS>

  Write4Bits(0x03 << 4);
 800062e:	2030      	movs	r0, #48	; 0x30
 8000630:	f000 f94e 	bl	80008d0 <Write4Bits>
  DelayUS(4500);
 8000634:	f241 1094 	movw	r0, #4500	; 0x1194
 8000638:	f000 f9c0 	bl	80009bc <DelayUS>

  Write4Bits(0x02 << 4);
 800063c:	2020      	movs	r0, #32
 800063e:	f000 f947 	bl	80008d0 <Write4Bits>
  DelayUS(100);
 8000642:	2064      	movs	r0, #100	; 0x64
 8000644:	f000 f9ba 	bl	80009bc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <HD44780_Init+0x124>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f043 0320 	orr.w	r3, r3, #32
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f8ff 	bl	8000856 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <HD44780_Init+0x128>)
 800065a:	2204      	movs	r2, #4
 800065c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800065e:	f000 f899 	bl	8000794 <HD44780_Display>
  HD44780_Clear();
 8000662:	f000 f84f 	bl	8000704 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <HD44780_Init+0x12c>)
 8000668:	2202      	movs	r2, #2
 800066a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <HD44780_Init+0x12c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f8ed 	bl	8000856 <SendCommand>
  DelayUS(4500);
 800067c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000680:	f000 f99c 	bl	80009bc <DelayUS>

  HD44780_CreateSpecialChar(0, bird);
 8000684:	4917      	ldr	r1, [pc, #92]	; (80006e4 <HD44780_Init+0x130>)
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f89a 	bl	80007c0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, mario1);
 800068c:	4916      	ldr	r1, [pc, #88]	; (80006e8 <HD44780_Init+0x134>)
 800068e:	2001      	movs	r0, #1
 8000690:	f000 f896 	bl	80007c0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(2, mario2);
 8000694:	4915      	ldr	r1, [pc, #84]	; (80006ec <HD44780_Init+0x138>)
 8000696:	2002      	movs	r0, #2
 8000698:	f000 f892 	bl	80007c0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(3, mario3);
 800069c:	4914      	ldr	r1, [pc, #80]	; (80006f0 <HD44780_Init+0x13c>)
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 f88e 	bl	80007c0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(4, mario4);
 80006a4:	4913      	ldr	r1, [pc, #76]	; (80006f4 <HD44780_Init+0x140>)
 80006a6:	2004      	movs	r0, #4
 80006a8:	f000 f88a 	bl	80007c0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(5, mario5);
 80006ac:	4912      	ldr	r1, [pc, #72]	; (80006f8 <HD44780_Init+0x144>)
 80006ae:	2005      	movs	r0, #5
 80006b0:	f000 f886 	bl	80007c0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(6, mario6);
 80006b4:	4911      	ldr	r1, [pc, #68]	; (80006fc <HD44780_Init+0x148>)
 80006b6:	2006      	movs	r0, #6
 80006b8:	f000 f882 	bl	80007c0 <HD44780_CreateSpecialChar>


  HD44780_CreateSpecialChar(7, moob);
 80006bc:	4910      	ldr	r1, [pc, #64]	; (8000700 <HD44780_Init+0x14c>)
 80006be:	2007      	movs	r0, #7
 80006c0:	f000 f87e 	bl	80007c0 <HD44780_CreateSpecialChar>



  HD44780_Home();
 80006c4:	f000 f829 	bl	800071a <HD44780_Home>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000cf 	.word	0x200000cf
 80006d4:	200000d0 	.word	0x200000d0
 80006d8:	200000cc 	.word	0x200000cc
 80006dc:	200000cd 	.word	0x200000cd
 80006e0:	200000ce 	.word	0x200000ce
 80006e4:	20000030 	.word	0x20000030
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000010 	.word	0x20000010
 80006f4:	20000018 	.word	0x20000018
 80006f8:	20000020 	.word	0x20000020
 80006fc:	20000028 	.word	0x20000028
 8000700:	20000038 	.word	0x20000038

08000704 <HD44780_Clear>:

void HD44780_Clear()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 f8a4 	bl	8000856 <SendCommand>
  DelayUS(2000);
 800070e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000712:	f000 f953 	bl	80009bc <DelayUS>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <HD44780_Home>:

void HD44780_Home()
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800071e:	2002      	movs	r0, #2
 8000720:	f000 f899 	bl	8000856 <SendCommand>
  DelayUS(2000);
 8000724:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000728:	f000 f948 	bl	80009bc <DelayUS>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	460a      	mov	r2, r1
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HD44780_SetCursor+0x5c>)
 8000742:	f107 0408 	add.w	r4, r7, #8
 8000746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <HD44780_SetCursor+0x60>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	429a      	cmp	r2, r3
 8000754:	d303      	bcc.n	800075e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HD44780_SetCursor+0x60>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	3b01      	subs	r3, #1
 800075c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	3318      	adds	r3, #24
 8000764:	443b      	add	r3, r7
 8000766:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	4413      	add	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	b25b      	sxtb	r3, r3
 8000774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000778:	b25b      	sxtb	r3, r3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f86a 	bl	8000856 <SendCommand>
}
 8000782:	bf00      	nop
 8000784:	371c      	adds	r7, #28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}
 800078a:	bf00      	nop
 800078c:	0800481c 	.word	0x0800481c
 8000790:	200000cf 	.word	0x200000cf

08000794 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HD44780_Display+0x28>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HD44780_Display+0x28>)
 80007a4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HD44780_Display+0x28>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f850 	bl	8000856 <SendCommand>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000cd 	.word	0x200000cd

080007c0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f837 	bl	8000856 <SendCommand>
  for (int i=0; i<8; i++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e009      	b.n	8000802 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f83b 	bl	8000872 <SendChar>
  for (int i=0; i<8; i++)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b07      	cmp	r3, #7
 8000806:	ddf2      	ble.n	80007ee <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f827 	bl	8000872 <SendChar>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000834:	e006      	b.n	8000844 <HD44780_PrintStr+0x18>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f817 	bl	8000872 <SendChar>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f4      	bne.n	8000836 <HD44780_PrintStr+0xa>
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f812 	bl	800088e <Send>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2101      	movs	r1, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f804 	bl	800088e <Send>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	460a      	mov	r2, r1
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	4613      	mov	r3, r2
 800089c:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f023 030f 	bic.w	r3, r3, #15
 80008a4:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80008ac:	7bfa      	ldrb	r2, [r7, #15]
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f80b 	bl	80008d0 <Write4Bits>
  Write4Bits((lownib)|mode);
 80008ba:	7bba      	ldrb	r2, [r7, #14]
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	4313      	orrs	r3, r2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f804 	bl	80008d0 <Write4Bits>
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f809 	bl	80008f4 <ExpanderWrite>
  PulseEnable(value);
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f821 	bl	800092c <PulseEnable>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <ExpanderWrite+0x30>)
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	4313      	orrs	r3, r2
 8000906:	b2db      	uxtb	r3, r3
 8000908:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800090a:	f107 020f 	add.w	r2, r7, #15
 800090e:	230a      	movs	r3, #10
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2301      	movs	r3, #1
 8000914:	214e      	movs	r1, #78	; 0x4e
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <ExpanderWrite+0x34>)
 8000918:	f001 faf6 	bl	8001f08 <HAL_I2C_Master_Transmit>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000d0 	.word	0x200000d0
 8000928:	200000d4 	.word	0x200000d4

0800092c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ffd8 	bl	80008f4 <ExpanderWrite>
  DelayUS(20);
 8000944:	2014      	movs	r0, #20
 8000946:	f000 f839 	bl	80009bc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f023 0304 	bic.w	r3, r3, #4
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ffce 	bl	80008f4 <ExpanderWrite>
  DelayUS(20);
 8000958:	2014      	movs	r0, #20
 800095a:	f000 f82f 	bl	80009bc <DelayUS>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <DelayInit>:

static void DelayInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <DelayInit+0x4c>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <DelayInit+0x4c>)
 8000972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000976:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <DelayInit+0x4c>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <DelayInit+0x4c>)
 800097e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000982:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <DelayInit+0x50>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <DelayInit+0x50>)
 800098a:	f023 0301 	bic.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <DelayInit+0x50>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <DelayInit+0x50>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <DelayInit+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80009a2:	bf00      	nop
  __ASM volatile ("NOP");
 80009a4:	bf00      	nop
  __ASM volatile ("NOP");
 80009a6:	bf00      	nop
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000edf0 	.word	0xe000edf0
 80009b8:	e0001000 	.word	0xe0001000

080009bc <DelayUS>:

static void DelayUS(uint32_t us) {
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <DelayUS+0x44>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <DelayUS+0x48>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9a      	lsrs	r2, r3, #18
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	fb02 f303 	mul.w	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <DelayUS+0x4c>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <DelayUS+0x4c>)
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f6      	bhi.n	80009de <DelayUS+0x22>
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	371c      	adds	r7, #28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000040 	.word	0x20000040
 8000a04:	431bde83 	.word	0x431bde83
 8000a08:	e0001000 	.word	0xe0001000

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0ba      	sub	sp, #232	; 0xe8
 8000a10:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	GPIO_PinState GPIO_state;

	 time_t now=time(NULL);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f002 fec8 	bl	80037a8 <time>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a20:	f000 fdec 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f8fe 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a28:	f000 f9c2 	bl	8000db0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a2c:	f000 f996 	bl	8000d5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a30:	f000 f966 	bl	8000d00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(4);
 8000a34:	2004      	movs	r0, #4
 8000a36:	f7ff fdbd 	bl	80005b4 <HD44780_Init>
  HD44780_Clear();
 8000a3a:	f7ff fe63 	bl	8000704 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff fe75 	bl	8000730 <HD44780_SetCursor>
  HD44780_PrintStr("HELLO");
 8000a46:	486f      	ldr	r0, [pc, #444]	; (8000c04 <main+0x1f8>)
 8000a48:	f7ff fef0 	bl	800082c <HD44780_PrintStr>
  HD44780_SetCursor(10,1);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f7ff fe6e 	bl	8000730 <HD44780_SetCursor>
  HD44780_PrintStr("WORLD");
 8000a54:	486c      	ldr	r0, [pc, #432]	; (8000c08 <main+0x1fc>)
 8000a56:	f7ff fee9 	bl	800082c <HD44780_PrintStr>
  HD44780_SetCursor(0,3);
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe67 	bl	8000730 <HD44780_SetCursor>
  HD44780_PrintStr("____________________");
 8000a62:	486a      	ldr	r0, [pc, #424]	; (8000c0c <main+0x200>)
 8000a64:	f7ff fee2 	bl	800082c <HD44780_PrintStr>
  HAL_Delay(2000);
 8000a68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a6c:	f000 fe38 	bl	80016e0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int A=1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	 	  int elem[23]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	225c      	movs	r2, #92	; 0x5c
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fe1f 	bl	80036c0 <memset>
	 	  int moob2[23]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000a82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a86:	225c      	movs	r2, #92	; 0x5c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fe18 	bl	80036c0 <memset>

	 	  int deel=0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	 	  int c1=0,c2=0,c3=0,c4=0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	 	  srand((unsigned) time(&now));
 8000aae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fe78 	bl	80037a8 <time>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	460b      	mov	r3, r1
 8000abc:	4613      	mov	r3, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fe06 	bl	80036d0 <srand>


	 		  for ( int x = 400; x >= 1 ; x-- )
 8000ac4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000acc:	e091      	b.n	8000bf2 <main+0x1e6>
	          {
	 			  	  char n=NULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	 			  	  int a,b,c;
	   //---------------------------------------------------------------
	    //stampa ostacoli

	 		 HD44780_Clear();
 8000ad4:	f7ff fe16 	bl	8000704 <HD44780_Clear>
	     	 stampa(elem,now,moob2);
 8000ad8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8000adc:	4638      	mov	r0, r7
 8000ade:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000ae2:	9100      	str	r1, [sp, #0]
 8000ae4:	f000 f9d2 	bl	8000e8c <stampa>

	   //---------------------------------------------------------------
	     //stampa personaggio

	     	 GPIO_state=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	4848      	ldr	r0, [pc, #288]	; (8000c10 <main+0x204>)
 8000aee:	f001 f895 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	     	           if(GPIO_state == GPIO_PIN_SET){
 8000af8:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d107      	bne.n	8000b10 <main+0x104>
	     	        	  A=1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	     	        	  spersonaggio(A);
 8000b06:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000b0a:	f000 fa65 	bl	8000fd8 <spersonaggio>
 8000b0e:	e006      	b.n	8000b1e <main+0x112>

	     	           }
	     	           else {
	     	        	  A=0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	     	        	  spersonaggio(A);
 8000b16:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000b1a:	f000 fa5d 	bl	8000fd8 <spersonaggio>
	     	           }
	     	           HD44780_SetCursor(0,4);
 8000b1e:	2104      	movs	r1, #4
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fe05 	bl	8000730 <HD44780_SetCursor>
	     	           HD44780_PrintStr("--------------------");
 8000b26:	483b      	ldr	r0, [pc, #236]	; (8000c14 <main+0x208>)
 8000b28:	f7ff fe80 	bl	800082c <HD44780_PrintStr>

	     	           c1=updatea(elem, c1);
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fa94 	bl	8001060 <updatea>
 8000b38:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	     	           c1++;
 8000b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b40:	3301      	adds	r3, #1
 8000b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	     	           c2++;
 8000b46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	     	           c2=updatea2(elem,c2,moob2);
 8000b50:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000b54:	463b      	mov	r3, r7
 8000b56:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fb10 	bl	8001180 <updatea2>
 8000b60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	     	 HAL_Delay (500-deel);
 8000b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b68:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fdb7 	bl	80016e0 <HAL_Delay>
	   //----------------------------------------------------------------
	     //GAME OVER --



	     	 if(c2%5==0 && deel<450){
 8000b72:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <main+0x20c>)
 8000b78:	fb83 2301 	smull	r2, r3, r3, r1
 8000b7c:	105a      	asrs	r2, r3, #1
 8000b7e:	17cb      	asrs	r3, r1, #31
 8000b80:	1ad2      	subs	r2, r2, r3
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	1aca      	subs	r2, r1, r3
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d109      	bne.n	8000ba2 <main+0x196>
 8000b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b92:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b96:	da04      	bge.n	8000ba2 <main+0x196>
	     		 deel=deel+10;
 8000b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b9c:	330a      	adds	r3, #10
 8000b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	     	 }
	     	 c3=verifica(elem,A,deel,moob2);
 8000ba2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000bac:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8000bb0:	f000 f9c6 	bl	8000f40 <verifica>
 8000bb4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	     		 deel=0;

	     	 }*/

	   //----------------------------------------------------------------
	     	 	 if(x==2){
 8000bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d113      	bne.n	8000be8 <main+0x1dc>

	     	 		 	 	HD44780_Clear();
 8000bc0:	f7ff fda0 	bl	8000704 <HD44780_Clear>
	     	 				HD44780_SetCursor(10,0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200a      	movs	r0, #10
 8000bc8:	f7ff fdb2 	bl	8000730 <HD44780_SetCursor>
	     	 				HD44780_PrintStr("YOU");
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <main+0x210>)
 8000bce:	f7ff fe2d 	bl	800082c <HD44780_PrintStr>
	     	 				HD44780_SetCursor(10,1);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f7ff fdab 	bl	8000730 <HD44780_SetCursor>
	     	 				HD44780_PrintStr("WIN XD");
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <main+0x214>)
 8000bdc:	f7ff fe26 	bl	800082c <HD44780_PrintStr>
	     	 				HAL_Delay (2000);
 8000be0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000be4:	f000 fd7c 	bl	80016e0 <HAL_Delay>
	 		  for ( int x = 400; x >= 1 ; x-- )
 8000be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000bec:	3b01      	subs	r3, #1
 8000bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f73f af69 	bgt.w	8000ace <main+0xc2>
	     	 	 }


	          }
	      HD44780_Clear();
 8000bfc:	f7ff fd82 	bl	8000704 <HD44780_Clear>
  {
 8000c00:	e736      	b.n	8000a70 <main+0x64>
 8000c02:	bf00      	nop
 8000c04:	0800482c 	.word	0x0800482c
 8000c08:	08004834 	.word	0x08004834
 8000c0c:	0800483c 	.word	0x0800483c
 8000c10:	40020800 	.word	0x40020800
 8000c14:	08004854 	.word	0x08004854
 8000c18:	66666667 	.word	0x66666667
 8000c1c:	0800486c 	.word	0x0800486c
 8000c20:	08004870 	.word	0x08004870

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2234      	movs	r2, #52	; 0x34
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fd44 	bl	80036c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <SystemClock_Config+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c70:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <SystemClock_Config+0xd8>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <SystemClock_Config+0xd8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c90:	2302      	movs	r3, #2
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ca0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 ff7a 	bl	8002bac <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cbe:	f000 fab4 	bl	800122a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fc1a 	bl	8002518 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cea:	f000 fa9e 	bl	800122a <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	; 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d0c:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_I2C1_Init+0x58>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d3e:	f000 ff9f 	bl	8001c80 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 fa6f 	bl	800122a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000d4 	.word	0x200000d4
 8000d54:	40005400 	.word	0x40005400
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_USART2_UART_Init+0x50>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d94:	f002 f9a8 	bl	80030e8 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d9e:	f000 fa44 	bl	800122a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000128 	.word	0x20000128
 8000dac:	40004400 	.word	0x40004400

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a2c      	ldr	r2, [pc, #176]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2120      	movs	r1, #32
 8000e3a:	4812      	ldr	r0, [pc, #72]	; (8000e84 <MX_GPIO_Init+0xd4>)
 8000e3c:	f000 ff06 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_GPIO_Init+0xd8>)
 8000e58:	f000 fd4c 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_GPIO_Init+0xd4>)
 8000e74:	f000 fd3e 	bl	80018f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020800 	.word	0x40020800

08000e8c <stampa>:

/* USER CODE BEGIN 4 */
void stampa(int elem[],time_t now,int moob2[]){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	e9c7 2300 	strd	r2, r3, [r7]

	for(int i=0;i<23;i++){
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e041      	b.n	8000f22 <stampa+0x96>
		if(elem[i]==1&&i<20){
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d10b      	bne.n	8000ec4 <stampa+0x38>
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b13      	cmp	r3, #19
 8000eb0:	dc08      	bgt.n	8000ec4 <stampa+0x38>
		    	HD44780_SetCursor(i,2);
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fc39 	bl	8000730 <HD44780_SetCursor>
		    	HD44780_PrintSpecialChar(7);;
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f7ff fca7 	bl	8000812 <HD44780_PrintSpecialChar>
		}
		if(moob2[i]==1&&i<20){
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	6a3a      	ldr	r2, [r7, #32]
 8000eca:	4413      	add	r3, r2
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d10b      	bne.n	8000eea <stampa+0x5e>
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b13      	cmp	r3, #19
 8000ed6:	dc08      	bgt.n	8000eea <stampa+0x5e>
				    	HD44780_SetCursor(i,0);
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fc26 	bl	8000730 <HD44780_SetCursor>
				    	HD44780_PrintSpecialChar(0);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fc94 	bl	8000812 <HD44780_PrintSpecialChar>
				}
		if(i<22 /*&& elem[i]==1 && elem[i+1]==0*/){
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2b15      	cmp	r3, #21
 8000eee:	dc15      	bgt.n	8000f1c <stampa+0x90>
			elem[i]=elem[i+1];
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	441a      	add	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	440b      	add	r3, r1
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	601a      	str	r2, [r3, #0]
			moob2[i]=moob2[i+1];
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	6a3a      	ldr	r2, [r7, #32]
 8000f0e:	441a      	add	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	6a39      	ldr	r1, [r7, #32]
 8000f16:	440b      	add	r3, r1
 8000f18:	6812      	ldr	r2, [r2, #0]
 8000f1a:	601a      	str	r2, [r3, #0]
	for(int i=0;i<23;i++){
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b16      	cmp	r3, #22
 8000f26:	ddba      	ble.n	8000e9e <stampa+0x12>
		}
	}

	elem[22]=0;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3358      	adds	r3, #88	; 0x58
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
	moob2[22]=0;
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	3358      	adds	r3, #88	; 0x58
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <verifica>:

int verifica(int elem[],int A,int deel,int moob2[]){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
	if((elem[1]==1 && A==1) ||(moob2[1]==1 && A==0) ){
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d102      	bne.n	8000f5e <verifica+0x1e>
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d007      	beq.n	8000f6e <verifica+0x2e>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3304      	adds	r3, #4
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d12d      	bne.n	8000fc4 <verifica+0x84>
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d12a      	bne.n	8000fc4 <verifica+0x84>
		HD44780_Clear();
 8000f6e:	f7ff fbc9 	bl	8000704 <HD44780_Clear>
		HD44780_SetCursor(10,0);
 8000f72:	2100      	movs	r1, #0
 8000f74:	200a      	movs	r0, #10
 8000f76:	f7ff fbdb 	bl	8000730 <HD44780_SetCursor>
		HD44780_PrintStr("GAME");
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <verifica+0x90>)
 8000f7c:	f7ff fc56 	bl	800082c <HD44780_PrintStr>
		HD44780_SetCursor(10,1);
 8000f80:	2101      	movs	r1, #1
 8000f82:	200a      	movs	r0, #10
 8000f84:	f7ff fbd4 	bl	8000730 <HD44780_SetCursor>
		HD44780_PrintStr("OVER");
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <verifica+0x94>)
 8000f8a:	f7ff fc4f 	bl	800082c <HD44780_PrintStr>
		HAL_Delay (2000);
 8000f8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f92:	f000 fba5 	bl	80016e0 <HAL_Delay>
		for(int i=0;i<23;i++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e00e      	b.n	8000fba <verifica+0x7a>
			elem[i]=0;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
			moob2[i]=0;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
		for(int i=0;i<23;i++){
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2b16      	cmp	r3, #22
 8000fbe:	dded      	ble.n	8000f9c <verifica+0x5c>
		}
		deel=0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
	}
	return 1;
 8000fc4:	2301      	movs	r3, #1
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	08004878 	.word	0x08004878
 8000fd4:	08004880 	.word	0x08004880

08000fd8 <spersonaggio>:

void spersonaggio(int A){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
						  HD44780_SetCursor(0,A);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff fba2 	bl	8000730 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff fc10 	bl	8000812 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(1,A);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff fb99 	bl	8000730 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(2);
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff fc07 	bl	8000812 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(2,A);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff fb90 	bl	8000730 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(3);
 8001010:	2003      	movs	r0, #3
 8001012:	f7ff fbfe 	bl	8000812 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(0,A+1);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	3301      	adds	r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4619      	mov	r1, r3
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fb85 	bl	8000730 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(4);
 8001026:	2004      	movs	r0, #4
 8001028:	f7ff fbf3 	bl	8000812 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(1,A+1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4619      	mov	r1, r3
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fb7a 	bl	8000730 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 800103c:	2005      	movs	r0, #5
 800103e:	f7ff fbe8 	bl	8000812 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(2,A+1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3301      	adds	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff fb6f 	bl	8000730 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(6);
 8001052:	2006      	movs	r0, #6
 8001054:	f7ff fbdd 	bl	8000812 <HD44780_PrintSpecialChar>


}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <updatea>:

int updatea(int elem[],int c1){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]

    int y=0;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
    y = rand()%6;
 800106e:	f002 fb5d 	bl	800372c <rand>
 8001072:	4602      	mov	r2, r0
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <updatea+0x11c>)
 8001076:	fb83 3102 	smull	r3, r1, r3, r2
 800107a:	17d3      	asrs	r3, r2, #31
 800107c:	1ac9      	subs	r1, r1, r3
 800107e:	460b      	mov	r3, r1
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	440b      	add	r3, r1
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	60fb      	str	r3, [r7, #12]
	  //printf("numero random : %d",y);
	  if(c1==5){
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b05      	cmp	r3, #5
 800108e:	d16e      	bne.n	800116e <updatea+0x10e>
      //printf("condizione ...\n");
      c1=0;
 8001090:	2300      	movs	r3, #0
 8001092:	603b      	str	r3, [r7, #0]
      switch(y){
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d85c      	bhi.n	8001154 <updatea+0xf4>
 800109a:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <updatea+0x40>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	080010b9 	.word	0x080010b9
 80010a4:	080010d3 	.word	0x080010d3
 80010a8:	080010ed 	.word	0x080010ed
 80010ac:	08001107 	.word	0x08001107
 80010b0:	08001121 	.word	0x08001121
 80010b4:	0800113b 	.word	0x0800113b
       case 0:
          elem[20]=0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3350      	adds	r3, #80	; 0x50
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
          elem[21]=1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3354      	adds	r3, #84	; 0x54
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
          elem[22]=0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3358      	adds	r3, #88	; 0x58
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
       break;
 80010d0:	e04e      	b.n	8001170 <updatea+0x110>

        case 1:
          elem[20]=1;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3350      	adds	r3, #80	; 0x50
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
          elem[21]=1;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3354      	adds	r3, #84	; 0x54
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
          elem[22]=0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3358      	adds	r3, #88	; 0x58
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
        break;
 80010ea:	e041      	b.n	8001170 <updatea+0x110>

        case 2:
          elem[20]=1;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3350      	adds	r3, #80	; 0x50
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
          elem[21]=1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3354      	adds	r3, #84	; 0x54
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
          elem[22]=1;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3358      	adds	r3, #88	; 0x58
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
        break;
 8001104:	e034      	b.n	8001170 <updatea+0x110>
        case 3:
          elem[20]=1;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3350      	adds	r3, #80	; 0x50
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
          elem[21]=0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3354      	adds	r3, #84	; 0x54
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
          elem[22]=1;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3358      	adds	r3, #88	; 0x58
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
        break;
 800111e:	e027      	b.n	8001170 <updatea+0x110>
        case 4:
          elem[20]=0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3350      	adds	r3, #80	; 0x50
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
          elem[21]=1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3354      	adds	r3, #84	; 0x54
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
          elem[22]=1;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3358      	adds	r3, #88	; 0x58
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
       break;
 8001138:	e01a      	b.n	8001170 <updatea+0x110>
       case 5:
          elem[20]=1;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3350      	adds	r3, #80	; 0x50
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
          elem[21]=0;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3354      	adds	r3, #84	; 0x54
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
          elem[22]=0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3358      	adds	r3, #88	; 0x58
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
       break;
 8001152:	e00d      	b.n	8001170 <updatea+0x110>
       default:
          elem[20]=0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3350      	adds	r3, #80	; 0x50
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
          elem[21]=0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3354      	adds	r3, #84	; 0x54
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
          elem[22]=0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3358      	adds	r3, #88	; 0x58
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e000      	b.n	8001170 <updatea+0x110>
      }
	 }
 800116e:	bf00      	nop
    return c1;
 8001170:	683b      	ldr	r3, [r7, #0]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2aaaaaab 	.word	0x2aaaaaab

08001180 <updatea2>:

int updatea2(int elem[],int c2,int moob[]){
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]



    for(int i=0;i<16;i++){
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e041      	b.n	8001216 <updatea2+0x96>
        if(elem[i]==0 && elem[i+1]==0 && elem[i+2]==0){
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d123      	bne.n	80011e8 <updatea2+0x68>
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d11b      	bne.n	80011e8 <updatea2+0x68>
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3302      	adds	r3, #2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4413      	add	r3, r2
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d113      	bne.n	80011e8 <updatea2+0x68>
          moob[i]=0;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
          moob[i+1]=1;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
          moob[i+2]=0;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3302      	adds	r3, #2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
        }
        if(elem[i]==1&&moob[i]==1){
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10c      	bne.n	8001210 <updatea2+0x90>
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d105      	bne.n	8001210 <updatea2+0x90>
          moob[i]=0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
    for(int i=0;i<16;i++){
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	ddba      	ble.n	8001192 <updatea2+0x12>
        }

    }
    return c2;
 800121c:	68bb      	ldr	r3, [r7, #8]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122e:	b672      	cpsid	i
}
 8001230:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001232:	e7fe      	b.n	8001232 <Error_Handler+0x8>

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_MspInit+0x4c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_MspInit+0x4c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001272:	2007      	movs	r0, #7
 8001274:	f000 fb0a 	bl	800188c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_I2C_MspInit+0x84>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12c      	bne.n	8001300 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	2312      	movs	r3, #18
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d4:	2304      	movs	r3, #4
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <HAL_I2C_MspInit+0x8c>)
 80012e0:	f000 fb08 	bl	80018f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40005400 	.word	0x40005400
 800130c:	40023800 	.word	0x40023800
 8001310:	40020400 	.word	0x40020400

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_UART_MspInit+0x84>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_UART_MspInit+0x88>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_UART_MspInit+0x88>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_UART_MspInit+0x88>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_UART_MspInit+0x88>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_UART_MspInit+0x88>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_UART_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800136e:	230c      	movs	r3, #12
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137e:	2307      	movs	r3, #7
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_UART_MspInit+0x8c>)
 800138a:	f000 fab3 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40004400 	.word	0x40004400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f956 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_kill>:

int _kill(int pid, int sig)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001412:	f002 f92b 	bl	800366c <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2216      	movs	r2, #22
 800141a:	601a      	str	r2, [r3, #0]
  return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_exit>:

void _exit (int status)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffe7 	bl	8001408 <_kill>
  while (1) {}    /* Make sure we hang here */
 800143a:	e7fe      	b.n	800143a <_exit+0x12>

0800143c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
  }

  return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
  }
  return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d6:	605a      	str	r2, [r3, #4]
  return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_isatty>:

int _isatty(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f002 f890 	bl	800366c <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20020000 	.word	0x20020000
 8001578:	00000400 	.word	0x00000400
 800157c:	2000016c 	.word	0x2000016c
 8001580:	20000188 	.word	0x20000188

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c4:	4c0b      	ldr	r4, [pc, #44]	; (80015f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d2:	f7ff ffd7 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f002 f84f 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff fa17 	bl	8000a0c <main>
  bx  lr    
 80015de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80015ec:	080049f8 	.word	0x080049f8
  ldr r2, =_sbss
 80015f0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80015f4:	20000184 	.word	0x20000184

080015f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <HAL_Init+0x40>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_Init+0x40>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x40>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f931 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fe00 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f93b 	bl	80018da <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f911 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000040 	.word	0x20000040
 8001698:	20000048 	.word	0x20000048
 800169c:	20000044 	.word	0x20000044

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000048 	.word	0x20000048
 80016c4:	20000170 	.word	0x20000170

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000170 	.word	0x20000170

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_Delay+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffde 	bl	80016c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000048 	.word	0x20000048

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff47 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff5c 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffb0 	bl	8001848 <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e165      	b.n	8001bdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8154 	bne.w	8001bd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d005      	beq.n	8001946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001942:	2b02      	cmp	r3, #2
 8001944:	d130      	bne.n	80019a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d017      	beq.n	80019e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80ae 	beq.w	8001bd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a5c      	ldr	r2, [pc, #368]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a96:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_GPIO_Init+0x304>)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4f      	ldr	r2, [pc, #316]	; (8001bfc <HAL_GPIO_Init+0x308>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x21a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4e      	ldr	r2, [pc, #312]	; (8001c00 <HAL_GPIO_Init+0x30c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x216>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4d      	ldr	r2, [pc, #308]	; (8001c04 <HAL_GPIO_Init+0x310>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x212>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <HAL_GPIO_Init+0x314>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <HAL_GPIO_Init+0x318>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x20a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4a      	ldr	r2, [pc, #296]	; (8001c10 <HAL_GPIO_Init+0x31c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x206>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a49      	ldr	r2, [pc, #292]	; (8001c14 <HAL_GPIO_Init+0x320>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x202>
 8001af2:	2306      	movs	r3, #6
 8001af4:	e00c      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001af6:	2307      	movs	r3, #7
 8001af8:	e00a      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001afa:	2305      	movs	r3, #5
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x21c>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x304>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b52:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b58:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b7c:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba6:	4a1c      	ldr	r2, [pc, #112]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd0:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <HAL_GPIO_Init+0x324>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	f67f ae96 	bls.w	8001910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40021400 	.word	0x40021400
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	619a      	str	r2, [r3, #24]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e12b      	b.n	8001eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff faec 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2224      	movs	r2, #36	; 0x24
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ce4:	f000 fd0a 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8001ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a81      	ldr	r2, [pc, #516]	; (8001ef4 <HAL_I2C_Init+0x274>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d807      	bhi.n	8001d04 <HAL_I2C_Init+0x84>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a80      	ldr	r2, [pc, #512]	; (8001ef8 <HAL_I2C_Init+0x278>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	bf94      	ite	ls
 8001cfc:	2301      	movls	r3, #1
 8001cfe:	2300      	movhi	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e006      	b.n	8001d12 <HAL_I2C_Init+0x92>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4a7d      	ldr	r2, [pc, #500]	; (8001efc <HAL_I2C_Init+0x27c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	bf94      	ite	ls
 8001d0c:	2301      	movls	r3, #1
 8001d0e:	2300      	movhi	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0e7      	b.n	8001eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4a78      	ldr	r2, [pc, #480]	; (8001f00 <HAL_I2C_Init+0x280>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0c9b      	lsrs	r3, r3, #18
 8001d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a6a      	ldr	r2, [pc, #424]	; (8001ef4 <HAL_I2C_Init+0x274>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d802      	bhi.n	8001d54 <HAL_I2C_Init+0xd4>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3301      	adds	r3, #1
 8001d52:	e009      	b.n	8001d68 <HAL_I2C_Init+0xe8>
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	4a69      	ldr	r2, [pc, #420]	; (8001f04 <HAL_I2C_Init+0x284>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	099b      	lsrs	r3, r3, #6
 8001d66:	3301      	adds	r3, #1
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	495c      	ldr	r1, [pc, #368]	; (8001ef4 <HAL_I2C_Init+0x274>)
 8001d84:	428b      	cmp	r3, r1
 8001d86:	d819      	bhi.n	8001dbc <HAL_I2C_Init+0x13c>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1e59      	subs	r1, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d96:	1c59      	adds	r1, r3, #1
 8001d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <HAL_I2C_Init+0x138>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1e59      	subs	r1, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db6:	e051      	b.n	8001e5c <HAL_I2C_Init+0x1dc>
 8001db8:	2304      	movs	r3, #4
 8001dba:	e04f      	b.n	8001e5c <HAL_I2C_Init+0x1dc>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d111      	bne.n	8001de8 <HAL_I2C_Init+0x168>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e58      	subs	r0, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	440b      	add	r3, r1
 8001dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e012      	b.n	8001e0e <HAL_I2C_Init+0x18e>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	0099      	lsls	r1, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Init+0x196>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e022      	b.n	8001e5c <HAL_I2C_Init+0x1dc>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10e      	bne.n	8001e3c <HAL_I2C_Init+0x1bc>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e58      	subs	r0, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	440b      	add	r3, r1
 8001e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3a:	e00f      	b.n	8001e5c <HAL_I2C_Init+0x1dc>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	6809      	ldr	r1, [r1, #0]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6911      	ldr	r1, [r2, #16]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68d2      	ldr	r2, [r2, #12]
 8001e96:	4311      	orrs	r1, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	000186a0 	.word	0x000186a0
 8001ef8:	001e847f 	.word	0x001e847f
 8001efc:	003d08ff 	.word	0x003d08ff
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	10624dd3 	.word	0x10624dd3

08001f08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	461a      	mov	r2, r3
 8001f14:	460b      	mov	r3, r1
 8001f16:	817b      	strh	r3, [r7, #10]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff fbd4 	bl	80016c8 <HAL_GetTick>
 8001f20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	f040 80e0 	bne.w	80020f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2319      	movs	r3, #25
 8001f36:	2201      	movs	r2, #1
 8001f38:	4970      	ldr	r1, [pc, #448]	; (80020fc <HAL_I2C_Master_Transmit+0x1f4>)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f964 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
 8001f48:	e0d3      	b.n	80020f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x50>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0cc      	b.n	80020f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d007      	beq.n	8001f7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0201 	orr.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2221      	movs	r2, #33	; 0x21
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2210      	movs	r2, #16
 8001f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	893a      	ldrh	r2, [r7, #8]
 8001fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a50      	ldr	r2, [pc, #320]	; (8002100 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fc0:	8979      	ldrh	r1, [r7, #10]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	6a3a      	ldr	r2, [r7, #32]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f89c 	bl	8002104 <I2C_MasterRequestWrite>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e08d      	b.n	80020f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fec:	e066      	b.n	80020bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	6a39      	ldr	r1, [r7, #32]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f9de 	bl	80023b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00d      	beq.n	800201a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b04      	cmp	r3, #4
 8002004:	d107      	bne.n	8002016 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b04      	cmp	r3, #4
 8002056:	d11b      	bne.n	8002090 <HAL_I2C_Master_Transmit+0x188>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	d017      	beq.n	8002090 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	6a39      	ldr	r1, [r7, #32]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f9ce 	bl	8002436 <I2C_WaitOnBTFFlagUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00d      	beq.n	80020bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d107      	bne.n	80020b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e01a      	b.n	80020f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d194      	bne.n	8001fee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020f0:	2302      	movs	r3, #2
  }
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	00100002 	.word	0x00100002
 8002100:	ffff0000 	.word	0xffff0000

08002104 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	460b      	mov	r3, r1
 8002112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d006      	beq.n	800212e <I2C_MasterRequestWrite+0x2a>
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d003      	beq.n	800212e <I2C_MasterRequestWrite+0x2a>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800212c:	d108      	bne.n	8002140 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e00b      	b.n	8002158 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	2b12      	cmp	r3, #18
 8002146:	d107      	bne.n	8002158 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002156:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f84f 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217e:	d103      	bne.n	8002188 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e035      	b.n	80021f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002194:	d108      	bne.n	80021a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002196:	897b      	ldrh	r3, [r7, #10]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021a4:	611a      	str	r2, [r3, #16]
 80021a6:	e01b      	b.n	80021e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021a8:	897b      	ldrh	r3, [r7, #10]
 80021aa:	11db      	asrs	r3, r3, #7
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f003 0306 	and.w	r3, r3, #6
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f063 030f 	orn	r3, r3, #15
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	490e      	ldr	r1, [pc, #56]	; (8002200 <I2C_MasterRequestWrite+0xfc>)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f875 	bl	80022b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e010      	b.n	80021f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <I2C_MasterRequestWrite+0x100>)
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f865 	bl	80022b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	00010008 	.word	0x00010008
 8002204:	00010002 	.word	0x00010002

08002208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002218:	e025      	b.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d021      	beq.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7ff fa51 	bl	80016c8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0220 	orr.w	r2, r3, #32
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e023      	b.n	80022ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10d      	bne.n	800228c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4013      	ands	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf0c      	ite	eq
 8002282:	2301      	moveq	r3, #1
 8002284:	2300      	movne	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	e00c      	b.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4013      	ands	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d0b6      	beq.n	800221a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022c4:	e051      	b.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d4:	d123      	bne.n	800231e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e046      	b.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d021      	beq.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7ff f9cf 	bl	80016c8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d116      	bne.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e020      	b.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10c      	bne.n	800238e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e00b      	b.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d18d      	bne.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023c0:	e02d      	b.n	800241e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f878 	bl	80024b8 <I2C_IsAcknowledgeFailed>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e02d      	b.n	800242e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d021      	beq.n	800241e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7ff f975 	bl	80016c8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d116      	bne.n	800241e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e007      	b.n	800242e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d1ca      	bne.n	80023c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002442:	e02d      	b.n	80024a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f837 	bl	80024b8 <I2C_IsAcknowledgeFailed>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e02d      	b.n	80024b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d021      	beq.n	80024a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245c:	f7ff f934 	bl	80016c8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	429a      	cmp	r2, r3
 800246a:	d302      	bcc.n	8002472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e007      	b.n	80024b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d1ca      	bne.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d11b      	bne.n	8002508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cc      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d90c      	bls.n	8002554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d044      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e067      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4934      	ldr	r1, [pc, #208]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7ff f85e 	bl	80016c8 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7ff f85a 	bl	80016c8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d20c      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f855 	bl	800274c <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe ffbe 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08004888 	.word	0x08004888
 80026dc:	20000040 	.word	0x20000040
 80026e0:	20000044 	.word	0x20000044

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000040 	.word	0x20000040

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	08004898 	.word	0x08004898

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffdc 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0b5b      	lsrs	r3, r3, #13
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	08004898 	.word	0x08004898

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002750:	b0ae      	sub	sp, #184	; 0xb8
 8002752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002772:	4bcb      	ldr	r3, [pc, #812]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b0c      	cmp	r3, #12
 800277c:	f200 8206 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x440>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	080027bd 	.word	0x080027bd
 800278c:	08002b8d 	.word	0x08002b8d
 8002790:	08002b8d 	.word	0x08002b8d
 8002794:	08002b8d 	.word	0x08002b8d
 8002798:	080027c5 	.word	0x080027c5
 800279c:	08002b8d 	.word	0x08002b8d
 80027a0:	08002b8d 	.word	0x08002b8d
 80027a4:	08002b8d 	.word	0x08002b8d
 80027a8:	080027cd 	.word	0x080027cd
 80027ac:	08002b8d 	.word	0x08002b8d
 80027b0:	08002b8d 	.word	0x08002b8d
 80027b4:	08002b8d 	.word	0x08002b8d
 80027b8:	080029bd 	.word	0x080029bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4bb9      	ldr	r3, [pc, #740]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x358>)
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80027c2:	e1e7      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c4:	4bb8      	ldr	r3, [pc, #736]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027ca:	e1e3      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027cc:	4bb4      	ldr	r3, [pc, #720]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d8:	4bb1      	ldr	r3, [pc, #708]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d071      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e4:	4bae      	ldr	r3, [pc, #696]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	099b      	lsrs	r3, r3, #6
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800280a:	4622      	mov	r2, r4
 800280c:	462b      	mov	r3, r5
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	0159      	lsls	r1, r3, #5
 8002818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281c:	0150      	lsls	r0, r2, #5
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4621      	mov	r1, r4
 8002824:	1a51      	subs	r1, r2, r1
 8002826:	6439      	str	r1, [r7, #64]	; 0x40
 8002828:	4629      	mov	r1, r5
 800282a:	eb63 0301 	sbc.w	r3, r3, r1
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800283c:	4649      	mov	r1, r9
 800283e:	018b      	lsls	r3, r1, #6
 8002840:	4641      	mov	r1, r8
 8002842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002846:	4641      	mov	r1, r8
 8002848:	018a      	lsls	r2, r1, #6
 800284a:	4641      	mov	r1, r8
 800284c:	1a51      	subs	r1, r2, r1
 800284e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002850:	4649      	mov	r1, r9
 8002852:	eb63 0301 	sbc.w	r3, r3, r1
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002864:	4649      	mov	r1, r9
 8002866:	00cb      	lsls	r3, r1, #3
 8002868:	4641      	mov	r1, r8
 800286a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800286e:	4641      	mov	r1, r8
 8002870:	00ca      	lsls	r2, r1, #3
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	4603      	mov	r3, r0
 8002878:	4622      	mov	r2, r4
 800287a:	189b      	adds	r3, r3, r2
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
 800287e:	462b      	mov	r3, r5
 8002880:	460a      	mov	r2, r1
 8002882:	eb42 0303 	adc.w	r3, r2, r3
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002894:	4629      	mov	r1, r5
 8002896:	024b      	lsls	r3, r1, #9
 8002898:	4621      	mov	r1, r4
 800289a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800289e:	4621      	mov	r1, r4
 80028a0:	024a      	lsls	r2, r1, #9
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028b8:	f7fd fcfa 	bl	80002b0 <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c6:	e067      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80028d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028e2:	2300      	movs	r3, #0
 80028e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fc:	0150      	lsls	r0, r2, #5
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4621      	mov	r1, r4
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	62b9      	str	r1, [r7, #40]	; 0x28
 8002908:	4629      	mov	r1, r5
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800291c:	4649      	mov	r1, r9
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002926:	4641      	mov	r1, r8
 8002928:	018a      	lsls	r2, r1, #6
 800292a:	4641      	mov	r1, r8
 800292c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002930:	4649      	mov	r1, r9
 8002932:	eb63 0b01 	sbc.w	fp, r3, r1
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002942:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800294a:	4692      	mov	sl, r2
 800294c:	469b      	mov	fp, r3
 800294e:	4623      	mov	r3, r4
 8002950:	eb1a 0303 	adds.w	r3, sl, r3
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	462b      	mov	r3, r5
 8002958:	eb4b 0303 	adc.w	r3, fp, r3
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800296a:	4629      	mov	r1, r5
 800296c:	028b      	lsls	r3, r1, #10
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002974:	4621      	mov	r1, r4
 8002976:	028a      	lsls	r2, r1, #10
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002980:	2200      	movs	r2, #0
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
 8002984:	677a      	str	r2, [r7, #116]	; 0x74
 8002986:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800298a:	f7fd fc91 	bl	80002b0 <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4613      	mov	r3, r2
 8002994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ba:	e0eb      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d06b      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	2200      	movs	r2, #0
 80029dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80029de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e6:	663b      	str	r3, [r7, #96]	; 0x60
 80029e8:	2300      	movs	r3, #0
 80029ea:	667b      	str	r3, [r7, #100]	; 0x64
 80029ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029f0:	4622      	mov	r2, r4
 80029f2:	462b      	mov	r3, r5
 80029f4:	f04f 0000 	mov.w	r0, #0
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	0159      	lsls	r1, r3, #5
 80029fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a02:	0150      	lsls	r0, r2, #5
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4621      	mov	r1, r4
 8002a0a:	1a51      	subs	r1, r2, r1
 8002a0c:	61b9      	str	r1, [r7, #24]
 8002a0e:	4629      	mov	r1, r5
 8002a10:	eb63 0301 	sbc.w	r3, r3, r1
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a22:	4659      	mov	r1, fp
 8002a24:	018b      	lsls	r3, r1, #6
 8002a26:	4651      	mov	r1, sl
 8002a28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2c:	4651      	mov	r1, sl
 8002a2e:	018a      	lsls	r2, r1, #6
 8002a30:	4651      	mov	r1, sl
 8002a32:	ebb2 0801 	subs.w	r8, r2, r1
 8002a36:	4659      	mov	r1, fp
 8002a38:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a50:	4690      	mov	r8, r2
 8002a52:	4699      	mov	r9, r3
 8002a54:	4623      	mov	r3, r4
 8002a56:	eb18 0303 	adds.w	r3, r8, r3
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	eb49 0303 	adc.w	r3, r9, r3
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a70:	4629      	mov	r1, r5
 8002a72:	024b      	lsls	r3, r1, #9
 8002a74:	4621      	mov	r1, r4
 8002a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	024a      	lsls	r2, r1, #9
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a86:	2200      	movs	r2, #0
 8002a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a90:	f7fd fc0e 	bl	80002b0 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a9e:	e065      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x420>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002abc:	653b      	str	r3, [r7, #80]	; 0x50
 8002abe:	2300      	movs	r3, #0
 8002ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ac2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ac6:	4642      	mov	r2, r8
 8002ac8:	464b      	mov	r3, r9
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad8:	0150      	lsls	r0, r2, #5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4641      	mov	r1, r8
 8002ae0:	1a51      	subs	r1, r2, r1
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002af8:	4659      	mov	r1, fp
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	4651      	mov	r1, sl
 8002afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b02:	4651      	mov	r1, sl
 8002b04:	018a      	lsls	r2, r1, #6
 8002b06:	4651      	mov	r1, sl
 8002b08:	1a54      	subs	r4, r2, r1
 8002b0a:	4659      	mov	r1, fp
 8002b0c:	eb63 0501 	sbc.w	r5, r3, r1
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	00eb      	lsls	r3, r5, #3
 8002b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b1e:	00e2      	lsls	r2, r4, #3
 8002b20:	4614      	mov	r4, r2
 8002b22:	461d      	mov	r5, r3
 8002b24:	4643      	mov	r3, r8
 8002b26:	18e3      	adds	r3, r4, r3
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	eb45 0303 	adc.w	r3, r5, r3
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b3e:	4629      	mov	r1, r5
 8002b40:	028b      	lsls	r3, r1, #10
 8002b42:	4621      	mov	r1, r4
 8002b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b48:	4621      	mov	r1, r4
 8002b4a:	028a      	lsls	r2, r1, #10
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b54:	2200      	movs	r2, #0
 8002b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b58:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b5e:	f7fd fba7 	bl	80002b0 <__aeabi_uldivmod>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4613      	mov	r3, r2
 8002b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0f1b      	lsrs	r3, r3, #28
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b8a:	e003      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	37b8      	adds	r7, #184	; 0xb8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	00f42400 	.word	0x00f42400

08002bac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e28d      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8083 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bcc:	4b94      	ldr	r3, [pc, #592]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d019      	beq.n	8002c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bd8:	4b91      	ldr	r3, [pc, #580]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002be4:	4b8e      	ldr	r3, [pc, #568]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b84      	ldr	r3, [pc, #528]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x124>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e25a      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x90>
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7b      	ldr	r2, [pc, #492]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xcc>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0xb4>
 8002c46:	4b76      	ldr	r3, [pc, #472]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a72      	ldr	r2, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xcc>
 8002c60:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b6c      	ldr	r3, [pc, #432]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6b      	ldr	r2, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fd22 	bl	80016c8 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fd1e 	bl	80016c8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e21f      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xdc>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fd0e 	bl	80016c8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fd0a 	bl	80016c8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e20b      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x104>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d06f      	beq.n	8002dbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cde:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d017      	beq.n	8002d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cea:	4b4d      	ldr	r3, [pc, #308]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x186>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1d3      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x278>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fcb7 	bl	80016c8 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fcb3 	bl	80016c8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1b4      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x278>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fc96 	bl	80016c8 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe fc92 	bl	80016c8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e193      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fc76 	bl	80016c8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fc72 	bl	80016c8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e173      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x234>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x27c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe fc5f 	bl	80016c8 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fc5b 	bl	80016c8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e15c      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b83      	ldr	r3, [pc, #524]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a7e      	ldr	r2, [pc, #504]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b7c      	ldr	r3, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b79      	ldr	r3, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fc1b 	bl	80016c8 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe fc17 	bl	80016c8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e118      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x31e>
 8002ebc:	4b66      	ldr	r3, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a65      	ldr	r2, [pc, #404]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x358>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x340>
 8002ed2:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a60      	ldr	r2, [pc, #384]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x358>
 8002eec:	4b5a      	ldr	r3, [pc, #360]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a59      	ldr	r2, [pc, #356]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a56      	ldr	r2, [pc, #344]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fbdc 	bl	80016c8 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe fbd8 	bl	80016c8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0d7      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x368>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe fbc6 	bl	80016c8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe fbc2 	bl	80016c8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0c1      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b40      	ldr	r3, [pc, #256]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a3a      	ldr	r2, [pc, #232]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80ad 	beq.w	80030d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d060      	beq.n	800304c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d145      	bne.n	800301e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fb96 	bl	80016c8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fb92 	bl	80016c8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e093      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fb67 	bl	80016c8 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fb63 	bl	80016c8 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e064      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x452>
 800301c:	e05c      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fb50 	bl	80016c8 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fb4c 	bl	80016c8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e04d      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x480>
 800304a:	e045      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e040      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000
 8003060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_RCC_OscConfig+0x538>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d030      	beq.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d129      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d122      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	4293      	cmp	r3, r2
 800309e:	d119      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10f      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e03f      	b.n	800317a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe f900 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800312a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f829 	bl	8003184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b0c0      	sub	sp, #256	; 0x100
 800318a:	af00      	add	r7, sp, #0
 800318c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	68d9      	ldr	r1, [r3, #12]
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	ea40 0301 	orr.w	r3, r0, r1
 80031ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031dc:	f021 010c 	bic.w	r1, r1, #12
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031ea:	430b      	orrs	r3, r1
 80031ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fe:	6999      	ldr	r1, [r3, #24]
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	ea40 0301 	orr.w	r3, r0, r1
 800320a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b8f      	ldr	r3, [pc, #572]	; (8003450 <UART_SetConfig+0x2cc>)
 8003214:	429a      	cmp	r2, r3
 8003216:	d005      	beq.n	8003224 <UART_SetConfig+0xa0>
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b8d      	ldr	r3, [pc, #564]	; (8003454 <UART_SetConfig+0x2d0>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d104      	bne.n	800322e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7ff fa7e 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8003228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800322c:	e003      	b.n	8003236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800322e:	f7ff fa65 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8003232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003240:	f040 810c 	bne.w	800345c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800324e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003256:	4622      	mov	r2, r4
 8003258:	462b      	mov	r3, r5
 800325a:	1891      	adds	r1, r2, r2
 800325c:	65b9      	str	r1, [r7, #88]	; 0x58
 800325e:	415b      	adcs	r3, r3
 8003260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003266:	4621      	mov	r1, r4
 8003268:	eb12 0801 	adds.w	r8, r2, r1
 800326c:	4629      	mov	r1, r5
 800326e:	eb43 0901 	adc.w	r9, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003286:	4690      	mov	r8, r2
 8003288:	4699      	mov	r9, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb18 0303 	adds.w	r3, r8, r3
 8003290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003294:	462b      	mov	r3, r5
 8003296:	eb49 0303 	adc.w	r3, r9, r3
 800329a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032b2:	460b      	mov	r3, r1
 80032b4:	18db      	adds	r3, r3, r3
 80032b6:	653b      	str	r3, [r7, #80]	; 0x50
 80032b8:	4613      	mov	r3, r2
 80032ba:	eb42 0303 	adc.w	r3, r2, r3
 80032be:	657b      	str	r3, [r7, #84]	; 0x54
 80032c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032c8:	f7fc fff2 	bl	80002b0 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <UART_SetConfig+0x2d4>)
 80032d2:	fba3 2302 	umull	r2, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	011c      	lsls	r4, r3, #4
 80032da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	1891      	adds	r1, r2, r2
 80032f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032f4:	415b      	adcs	r3, r3
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032fc:	4641      	mov	r1, r8
 80032fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003302:	4649      	mov	r1, r9
 8003304:	eb43 0b01 	adc.w	fp, r3, r1
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800331c:	4692      	mov	sl, r2
 800331e:	469b      	mov	fp, r3
 8003320:	4643      	mov	r3, r8
 8003322:	eb1a 0303 	adds.w	r3, sl, r3
 8003326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800332a:	464b      	mov	r3, r9
 800332c:	eb4b 0303 	adc.w	r3, fp, r3
 8003330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003348:	460b      	mov	r3, r1
 800334a:	18db      	adds	r3, r3, r3
 800334c:	643b      	str	r3, [r7, #64]	; 0x40
 800334e:	4613      	mov	r3, r2
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	647b      	str	r3, [r7, #68]	; 0x44
 8003356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800335a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800335e:	f7fc ffa7 	bl	80002b0 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4611      	mov	r1, r2
 8003368:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <UART_SetConfig+0x2d4>)
 800336a:	fba3 2301 	umull	r2, r3, r3, r1
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2264      	movs	r2, #100	; 0x64
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	1acb      	subs	r3, r1, r3
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <UART_SetConfig+0x2d4>)
 8003380:	fba3 2302 	umull	r2, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800338c:	441c      	add	r4, r3
 800338e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003392:	2200      	movs	r2, #0
 8003394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800339c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	1891      	adds	r1, r2, r2
 80033a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80033a8:	415b      	adcs	r3, r3
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033b0:	4641      	mov	r1, r8
 80033b2:	1851      	adds	r1, r2, r1
 80033b4:	6339      	str	r1, [r7, #48]	; 0x30
 80033b6:	4649      	mov	r1, r9
 80033b8:	414b      	adcs	r3, r1
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033c8:	4659      	mov	r1, fp
 80033ca:	00cb      	lsls	r3, r1, #3
 80033cc:	4651      	mov	r1, sl
 80033ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d2:	4651      	mov	r1, sl
 80033d4:	00ca      	lsls	r2, r1, #3
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	4642      	mov	r2, r8
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033e4:	464b      	mov	r3, r9
 80033e6:	460a      	mov	r2, r1
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003404:	460b      	mov	r3, r1
 8003406:	18db      	adds	r3, r3, r3
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
 800340a:	4613      	mov	r3, r2
 800340c:	eb42 0303 	adc.w	r3, r2, r3
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800341a:	f7fc ff49 	bl	80002b0 <__aeabi_uldivmod>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <UART_SetConfig+0x2d4>)
 8003424:	fba3 1302 	umull	r1, r3, r3, r2
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	2164      	movs	r1, #100	; 0x64
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3332      	adds	r3, #50	; 0x32
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <UART_SetConfig+0x2d4>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	f003 0207 	and.w	r2, r3, #7
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4422      	add	r2, r4
 800344a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800344c:	e105      	b.n	800365a <UART_SetConfig+0x4d6>
 800344e:	bf00      	nop
 8003450:	40011000 	.word	0x40011000
 8003454:	40011400 	.word	0x40011400
 8003458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003460:	2200      	movs	r2, #0
 8003462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800346a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800346e:	4642      	mov	r2, r8
 8003470:	464b      	mov	r3, r9
 8003472:	1891      	adds	r1, r2, r2
 8003474:	6239      	str	r1, [r7, #32]
 8003476:	415b      	adcs	r3, r3
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800347e:	4641      	mov	r1, r8
 8003480:	1854      	adds	r4, r2, r1
 8003482:	4649      	mov	r1, r9
 8003484:	eb43 0501 	adc.w	r5, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	00eb      	lsls	r3, r5, #3
 8003492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003496:	00e2      	lsls	r2, r4, #3
 8003498:	4614      	mov	r4, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4643      	mov	r3, r8
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034a4:	464b      	mov	r3, r9
 80034a6:	eb45 0303 	adc.w	r3, r5, r3
 80034aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034ca:	4629      	mov	r1, r5
 80034cc:	008b      	lsls	r3, r1, #2
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034d4:	4621      	mov	r1, r4
 80034d6:	008a      	lsls	r2, r1, #2
 80034d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034dc:	f7fc fee8 	bl	80002b0 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4b60      	ldr	r3, [pc, #384]	; (8003668 <UART_SetConfig+0x4e4>)
 80034e6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	011c      	lsls	r4, r3, #4
 80034ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003500:	4642      	mov	r2, r8
 8003502:	464b      	mov	r3, r9
 8003504:	1891      	adds	r1, r2, r2
 8003506:	61b9      	str	r1, [r7, #24]
 8003508:	415b      	adcs	r3, r3
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003510:	4641      	mov	r1, r8
 8003512:	1851      	adds	r1, r2, r1
 8003514:	6139      	str	r1, [r7, #16]
 8003516:	4649      	mov	r1, r9
 8003518:	414b      	adcs	r3, r1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003528:	4659      	mov	r1, fp
 800352a:	00cb      	lsls	r3, r1, #3
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003532:	4651      	mov	r1, sl
 8003534:	00ca      	lsls	r2, r1, #3
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	4603      	mov	r3, r0
 800353c:	4642      	mov	r2, r8
 800353e:	189b      	adds	r3, r3, r2
 8003540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003544:	464b      	mov	r3, r9
 8003546:	460a      	mov	r2, r1
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	67bb      	str	r3, [r7, #120]	; 0x78
 800355a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003568:	4649      	mov	r1, r9
 800356a:	008b      	lsls	r3, r1, #2
 800356c:	4641      	mov	r1, r8
 800356e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003572:	4641      	mov	r1, r8
 8003574:	008a      	lsls	r2, r1, #2
 8003576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800357a:	f7fc fe99 	bl	80002b0 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4b39      	ldr	r3, [pc, #228]	; (8003668 <UART_SetConfig+0x4e4>)
 8003584:	fba3 1302 	umull	r1, r3, r3, r2
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	2164      	movs	r1, #100	; 0x64
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	3332      	adds	r3, #50	; 0x32
 8003596:	4a34      	ldr	r2, [pc, #208]	; (8003668 <UART_SetConfig+0x4e4>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a2:	441c      	add	r4, r3
 80035a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a8:	2200      	movs	r2, #0
 80035aa:	673b      	str	r3, [r7, #112]	; 0x70
 80035ac:	677a      	str	r2, [r7, #116]	; 0x74
 80035ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035b2:	4642      	mov	r2, r8
 80035b4:	464b      	mov	r3, r9
 80035b6:	1891      	adds	r1, r2, r2
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	415b      	adcs	r3, r3
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c2:	4641      	mov	r1, r8
 80035c4:	1851      	adds	r1, r2, r1
 80035c6:	6039      	str	r1, [r7, #0]
 80035c8:	4649      	mov	r1, r9
 80035ca:	414b      	adcs	r3, r1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035da:	4659      	mov	r1, fp
 80035dc:	00cb      	lsls	r3, r1, #3
 80035de:	4651      	mov	r1, sl
 80035e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035e4:	4651      	mov	r1, sl
 80035e6:	00ca      	lsls	r2, r1, #3
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	4603      	mov	r3, r0
 80035ee:	4642      	mov	r2, r8
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f4:	464b      	mov	r3, r9
 80035f6:	460a      	mov	r2, r1
 80035f8:	eb42 0303 	adc.w	r3, r2, r3
 80035fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	663b      	str	r3, [r7, #96]	; 0x60
 8003608:	667a      	str	r2, [r7, #100]	; 0x64
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003616:	4649      	mov	r1, r9
 8003618:	008b      	lsls	r3, r1, #2
 800361a:	4641      	mov	r1, r8
 800361c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003620:	4641      	mov	r1, r8
 8003622:	008a      	lsls	r2, r1, #2
 8003624:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003628:	f7fc fe42 	bl	80002b0 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <UART_SetConfig+0x4e4>)
 8003632:	fba3 1302 	umull	r1, r3, r3, r2
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2164      	movs	r1, #100	; 0x64
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	3332      	adds	r3, #50	; 0x32
 8003644:	4a08      	ldr	r2, [pc, #32]	; (8003668 <UART_SetConfig+0x4e4>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4422      	add	r2, r4
 8003658:	609a      	str	r2, [r3, #8]
}
 800365a:	bf00      	nop
 800365c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	51eb851f 	.word	0x51eb851f

0800366c <__errno>:
 800366c:	4b01      	ldr	r3, [pc, #4]	; (8003674 <__errno+0x8>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2000004c 	.word	0x2000004c

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	; (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	; (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	; (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	; (80036bc <__libc_init_array+0x44>)
 800368c:	f001 f8ba 	bl	8004804 <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	080049f0 	.word	0x080049f0
 80036b4:	080049f0 	.word	0x080049f0
 80036b8:	080049f0 	.word	0x080049f0
 80036bc:	080049f4 	.word	0x080049f4

080036c0 <memset>:
 80036c0:	4402      	add	r2, r0
 80036c2:	4603      	mov	r3, r0
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d100      	bne.n	80036ca <memset+0xa>
 80036c8:	4770      	bx	lr
 80036ca:	f803 1b01 	strb.w	r1, [r3], #1
 80036ce:	e7f9      	b.n	80036c4 <memset+0x4>

080036d0 <srand>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <srand+0x44>)
 80036d4:	681d      	ldr	r5, [r3, #0]
 80036d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80036d8:	4604      	mov	r4, r0
 80036da:	b9b3      	cbnz	r3, 800370a <srand+0x3a>
 80036dc:	2018      	movs	r0, #24
 80036de:	f000 f8bf 	bl	8003860 <malloc>
 80036e2:	4602      	mov	r2, r0
 80036e4:	63a8      	str	r0, [r5, #56]	; 0x38
 80036e6:	b920      	cbnz	r0, 80036f2 <srand+0x22>
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <srand+0x48>)
 80036ea:	480c      	ldr	r0, [pc, #48]	; (800371c <srand+0x4c>)
 80036ec:	2142      	movs	r1, #66	; 0x42
 80036ee:	f000 f875 	bl	80037dc <__assert_func>
 80036f2:	490b      	ldr	r1, [pc, #44]	; (8003720 <srand+0x50>)
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <srand+0x54>)
 80036f6:	e9c0 1300 	strd	r1, r3, [r0]
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <srand+0x58>)
 80036fc:	6083      	str	r3, [r0, #8]
 80036fe:	230b      	movs	r3, #11
 8003700:	8183      	strh	r3, [r0, #12]
 8003702:	2100      	movs	r1, #0
 8003704:	2001      	movs	r0, #1
 8003706:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800370a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800370c:	2200      	movs	r2, #0
 800370e:	611c      	str	r4, [r3, #16]
 8003710:	615a      	str	r2, [r3, #20]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	2000004c 	.word	0x2000004c
 8003718:	080048a4 	.word	0x080048a4
 800371c:	080048bb 	.word	0x080048bb
 8003720:	abcd330e 	.word	0xabcd330e
 8003724:	e66d1234 	.word	0xe66d1234
 8003728:	0005deec 	.word	0x0005deec

0800372c <rand>:
 800372c:	4b16      	ldr	r3, [pc, #88]	; (8003788 <rand+0x5c>)
 800372e:	b510      	push	{r4, lr}
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003734:	b9b3      	cbnz	r3, 8003764 <rand+0x38>
 8003736:	2018      	movs	r0, #24
 8003738:	f000 f892 	bl	8003860 <malloc>
 800373c:	63a0      	str	r0, [r4, #56]	; 0x38
 800373e:	b928      	cbnz	r0, 800374c <rand+0x20>
 8003740:	4602      	mov	r2, r0
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <rand+0x60>)
 8003744:	4812      	ldr	r0, [pc, #72]	; (8003790 <rand+0x64>)
 8003746:	214e      	movs	r1, #78	; 0x4e
 8003748:	f000 f848 	bl	80037dc <__assert_func>
 800374c:	4a11      	ldr	r2, [pc, #68]	; (8003794 <rand+0x68>)
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <rand+0x6c>)
 8003750:	e9c0 2300 	strd	r2, r3, [r0]
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <rand+0x70>)
 8003756:	6083      	str	r3, [r0, #8]
 8003758:	230b      	movs	r3, #11
 800375a:	8183      	strh	r3, [r0, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	2300      	movs	r3, #0
 8003760:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003764:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003766:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <rand+0x74>)
 8003768:	6920      	ldr	r0, [r4, #16]
 800376a:	6963      	ldr	r3, [r4, #20]
 800376c:	490d      	ldr	r1, [pc, #52]	; (80037a4 <rand+0x78>)
 800376e:	4342      	muls	r2, r0
 8003770:	fb01 2203 	mla	r2, r1, r3, r2
 8003774:	fba0 0101 	umull	r0, r1, r0, r1
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	eb42 0001 	adc.w	r0, r2, r1
 800377e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003782:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003786:	bd10      	pop	{r4, pc}
 8003788:	2000004c 	.word	0x2000004c
 800378c:	080048a4 	.word	0x080048a4
 8003790:	080048bb 	.word	0x080048bb
 8003794:	abcd330e 	.word	0xabcd330e
 8003798:	e66d1234 	.word	0xe66d1234
 800379c:	0005deec 	.word	0x0005deec
 80037a0:	5851f42d 	.word	0x5851f42d
 80037a4:	4c957f2d 	.word	0x4c957f2d

080037a8 <time>:
 80037a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <time+0x30>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	4669      	mov	r1, sp
 80037b0:	4604      	mov	r4, r0
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	f000 f842 	bl	800383c <_gettimeofday_r>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	bfbe      	ittt	lt
 80037bc:	f04f 32ff 	movlt.w	r2, #4294967295
 80037c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80037c4:	e9cd 2300 	strdlt	r2, r3, [sp]
 80037c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037cc:	b10c      	cbz	r4, 80037d2 <time+0x2a>
 80037ce:	e9c4 0100 	strd	r0, r1, [r4]
 80037d2:	b004      	add	sp, #16
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	bf00      	nop
 80037d8:	2000004c 	.word	0x2000004c

080037dc <__assert_func>:
 80037dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037de:	4614      	mov	r4, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <__assert_func+0x2c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4605      	mov	r5, r0
 80037e8:	68d8      	ldr	r0, [r3, #12]
 80037ea:	b14c      	cbz	r4, 8003800 <__assert_func+0x24>
 80037ec:	4b07      	ldr	r3, [pc, #28]	; (800380c <__assert_func+0x30>)
 80037ee:	9100      	str	r1, [sp, #0]
 80037f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80037f4:	4906      	ldr	r1, [pc, #24]	; (8003810 <__assert_func+0x34>)
 80037f6:	462b      	mov	r3, r5
 80037f8:	f000 f80e 	bl	8003818 <fiprintf>
 80037fc:	f000 fcd6 	bl	80041ac <abort>
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <__assert_func+0x38>)
 8003802:	461c      	mov	r4, r3
 8003804:	e7f3      	b.n	80037ee <__assert_func+0x12>
 8003806:	bf00      	nop
 8003808:	2000004c 	.word	0x2000004c
 800380c:	08004916 	.word	0x08004916
 8003810:	08004923 	.word	0x08004923
 8003814:	08004951 	.word	0x08004951

08003818 <fiprintf>:
 8003818:	b40e      	push	{r1, r2, r3}
 800381a:	b503      	push	{r0, r1, lr}
 800381c:	4601      	mov	r1, r0
 800381e:	ab03      	add	r3, sp, #12
 8003820:	4805      	ldr	r0, [pc, #20]	; (8003838 <fiprintf+0x20>)
 8003822:	f853 2b04 	ldr.w	r2, [r3], #4
 8003826:	6800      	ldr	r0, [r0, #0]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	f000 f92b 	bl	8003a84 <_vfiprintf_r>
 800382e:	b002      	add	sp, #8
 8003830:	f85d eb04 	ldr.w	lr, [sp], #4
 8003834:	b003      	add	sp, #12
 8003836:	4770      	bx	lr
 8003838:	2000004c 	.word	0x2000004c

0800383c <_gettimeofday_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4d07      	ldr	r5, [pc, #28]	; (800385c <_gettimeofday_r+0x20>)
 8003840:	2300      	movs	r3, #0
 8003842:	4604      	mov	r4, r0
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	f000 ffd3 	bl	80047f4 <_gettimeofday>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	d102      	bne.n	8003858 <_gettimeofday_r+0x1c>
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	b103      	cbz	r3, 8003858 <_gettimeofday_r+0x1c>
 8003856:	6023      	str	r3, [r4, #0]
 8003858:	bd38      	pop	{r3, r4, r5, pc}
 800385a:	bf00      	nop
 800385c:	2000017c 	.word	0x2000017c

08003860 <malloc>:
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <malloc+0xc>)
 8003862:	4601      	mov	r1, r0
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	f000 b86f 	b.w	8003948 <_malloc_r>
 800386a:	bf00      	nop
 800386c:	2000004c 	.word	0x2000004c

08003870 <_free_r>:
 8003870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003872:	2900      	cmp	r1, #0
 8003874:	d044      	beq.n	8003900 <_free_r+0x90>
 8003876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800387a:	9001      	str	r0, [sp, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f1a1 0404 	sub.w	r4, r1, #4
 8003882:	bfb8      	it	lt
 8003884:	18e4      	addlt	r4, r4, r3
 8003886:	f000 feb9 	bl	80045fc <__malloc_lock>
 800388a:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <_free_r+0x94>)
 800388c:	9801      	ldr	r0, [sp, #4]
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	b933      	cbnz	r3, 80038a0 <_free_r+0x30>
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6014      	str	r4, [r2, #0]
 8003896:	b003      	add	sp, #12
 8003898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800389c:	f000 beb4 	b.w	8004608 <__malloc_unlock>
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d908      	bls.n	80038b6 <_free_r+0x46>
 80038a4:	6825      	ldr	r5, [r4, #0]
 80038a6:	1961      	adds	r1, r4, r5
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1949      	addeq	r1, r1, r5
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	e7ed      	b.n	8003892 <_free_r+0x22>
 80038b6:	461a      	mov	r2, r3
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b10b      	cbz	r3, 80038c0 <_free_r+0x50>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d9fa      	bls.n	80038b6 <_free_r+0x46>
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	1855      	adds	r5, r2, r1
 80038c4:	42a5      	cmp	r5, r4
 80038c6:	d10b      	bne.n	80038e0 <_free_r+0x70>
 80038c8:	6824      	ldr	r4, [r4, #0]
 80038ca:	4421      	add	r1, r4
 80038cc:	1854      	adds	r4, r2, r1
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	d1e0      	bne.n	8003896 <_free_r+0x26>
 80038d4:	681c      	ldr	r4, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	6053      	str	r3, [r2, #4]
 80038da:	4421      	add	r1, r4
 80038dc:	6011      	str	r1, [r2, #0]
 80038de:	e7da      	b.n	8003896 <_free_r+0x26>
 80038e0:	d902      	bls.n	80038e8 <_free_r+0x78>
 80038e2:	230c      	movs	r3, #12
 80038e4:	6003      	str	r3, [r0, #0]
 80038e6:	e7d6      	b.n	8003896 <_free_r+0x26>
 80038e8:	6825      	ldr	r5, [r4, #0]
 80038ea:	1961      	adds	r1, r4, r5
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf04      	itt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	bf04      	itt	eq
 80038f8:	1949      	addeq	r1, r1, r5
 80038fa:	6021      	streq	r1, [r4, #0]
 80038fc:	6054      	str	r4, [r2, #4]
 80038fe:	e7ca      	b.n	8003896 <_free_r+0x26>
 8003900:	b003      	add	sp, #12
 8003902:	bd30      	pop	{r4, r5, pc}
 8003904:	20000174 	.word	0x20000174

08003908 <sbrk_aligned>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4e0e      	ldr	r6, [pc, #56]	; (8003944 <sbrk_aligned+0x3c>)
 800390c:	460c      	mov	r4, r1
 800390e:	6831      	ldr	r1, [r6, #0]
 8003910:	4605      	mov	r5, r0
 8003912:	b911      	cbnz	r1, 800391a <sbrk_aligned+0x12>
 8003914:	f000 fb7a 	bl	800400c <_sbrk_r>
 8003918:	6030      	str	r0, [r6, #0]
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	f000 fb75 	bl	800400c <_sbrk_r>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d00a      	beq.n	800393c <sbrk_aligned+0x34>
 8003926:	1cc4      	adds	r4, r0, #3
 8003928:	f024 0403 	bic.w	r4, r4, #3
 800392c:	42a0      	cmp	r0, r4
 800392e:	d007      	beq.n	8003940 <sbrk_aligned+0x38>
 8003930:	1a21      	subs	r1, r4, r0
 8003932:	4628      	mov	r0, r5
 8003934:	f000 fb6a 	bl	800400c <_sbrk_r>
 8003938:	3001      	adds	r0, #1
 800393a:	d101      	bne.n	8003940 <sbrk_aligned+0x38>
 800393c:	f04f 34ff 	mov.w	r4, #4294967295
 8003940:	4620      	mov	r0, r4
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	20000178 	.word	0x20000178

08003948 <_malloc_r>:
 8003948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394c:	1ccd      	adds	r5, r1, #3
 800394e:	f025 0503 	bic.w	r5, r5, #3
 8003952:	3508      	adds	r5, #8
 8003954:	2d0c      	cmp	r5, #12
 8003956:	bf38      	it	cc
 8003958:	250c      	movcc	r5, #12
 800395a:	2d00      	cmp	r5, #0
 800395c:	4607      	mov	r7, r0
 800395e:	db01      	blt.n	8003964 <_malloc_r+0x1c>
 8003960:	42a9      	cmp	r1, r5
 8003962:	d905      	bls.n	8003970 <_malloc_r+0x28>
 8003964:	230c      	movs	r3, #12
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	2600      	movs	r6, #0
 800396a:	4630      	mov	r0, r6
 800396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003970:	4e2e      	ldr	r6, [pc, #184]	; (8003a2c <_malloc_r+0xe4>)
 8003972:	f000 fe43 	bl	80045fc <__malloc_lock>
 8003976:	6833      	ldr	r3, [r6, #0]
 8003978:	461c      	mov	r4, r3
 800397a:	bb34      	cbnz	r4, 80039ca <_malloc_r+0x82>
 800397c:	4629      	mov	r1, r5
 800397e:	4638      	mov	r0, r7
 8003980:	f7ff ffc2 	bl	8003908 <sbrk_aligned>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	4604      	mov	r4, r0
 8003988:	d14d      	bne.n	8003a26 <_malloc_r+0xde>
 800398a:	6834      	ldr	r4, [r6, #0]
 800398c:	4626      	mov	r6, r4
 800398e:	2e00      	cmp	r6, #0
 8003990:	d140      	bne.n	8003a14 <_malloc_r+0xcc>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	4631      	mov	r1, r6
 8003996:	4638      	mov	r0, r7
 8003998:	eb04 0803 	add.w	r8, r4, r3
 800399c:	f000 fb36 	bl	800400c <_sbrk_r>
 80039a0:	4580      	cmp	r8, r0
 80039a2:	d13a      	bne.n	8003a1a <_malloc_r+0xd2>
 80039a4:	6821      	ldr	r1, [r4, #0]
 80039a6:	3503      	adds	r5, #3
 80039a8:	1a6d      	subs	r5, r5, r1
 80039aa:	f025 0503 	bic.w	r5, r5, #3
 80039ae:	3508      	adds	r5, #8
 80039b0:	2d0c      	cmp	r5, #12
 80039b2:	bf38      	it	cc
 80039b4:	250c      	movcc	r5, #12
 80039b6:	4629      	mov	r1, r5
 80039b8:	4638      	mov	r0, r7
 80039ba:	f7ff ffa5 	bl	8003908 <sbrk_aligned>
 80039be:	3001      	adds	r0, #1
 80039c0:	d02b      	beq.n	8003a1a <_malloc_r+0xd2>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	442b      	add	r3, r5
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	e00e      	b.n	80039e8 <_malloc_r+0xa0>
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	1b52      	subs	r2, r2, r5
 80039ce:	d41e      	bmi.n	8003a0e <_malloc_r+0xc6>
 80039d0:	2a0b      	cmp	r2, #11
 80039d2:	d916      	bls.n	8003a02 <_malloc_r+0xba>
 80039d4:	1961      	adds	r1, r4, r5
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	6025      	str	r5, [r4, #0]
 80039da:	bf18      	it	ne
 80039dc:	6059      	strne	r1, [r3, #4]
 80039de:	6863      	ldr	r3, [r4, #4]
 80039e0:	bf08      	it	eq
 80039e2:	6031      	streq	r1, [r6, #0]
 80039e4:	5162      	str	r2, [r4, r5]
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	4638      	mov	r0, r7
 80039ea:	f104 060b 	add.w	r6, r4, #11
 80039ee:	f000 fe0b 	bl	8004608 <__malloc_unlock>
 80039f2:	f026 0607 	bic.w	r6, r6, #7
 80039f6:	1d23      	adds	r3, r4, #4
 80039f8:	1af2      	subs	r2, r6, r3
 80039fa:	d0b6      	beq.n	800396a <_malloc_r+0x22>
 80039fc:	1b9b      	subs	r3, r3, r6
 80039fe:	50a3      	str	r3, [r4, r2]
 8003a00:	e7b3      	b.n	800396a <_malloc_r+0x22>
 8003a02:	6862      	ldr	r2, [r4, #4]
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	bf0c      	ite	eq
 8003a08:	6032      	streq	r2, [r6, #0]
 8003a0a:	605a      	strne	r2, [r3, #4]
 8003a0c:	e7ec      	b.n	80039e8 <_malloc_r+0xa0>
 8003a0e:	4623      	mov	r3, r4
 8003a10:	6864      	ldr	r4, [r4, #4]
 8003a12:	e7b2      	b.n	800397a <_malloc_r+0x32>
 8003a14:	4634      	mov	r4, r6
 8003a16:	6876      	ldr	r6, [r6, #4]
 8003a18:	e7b9      	b.n	800398e <_malloc_r+0x46>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4638      	mov	r0, r7
 8003a20:	f000 fdf2 	bl	8004608 <__malloc_unlock>
 8003a24:	e7a1      	b.n	800396a <_malloc_r+0x22>
 8003a26:	6025      	str	r5, [r4, #0]
 8003a28:	e7de      	b.n	80039e8 <_malloc_r+0xa0>
 8003a2a:	bf00      	nop
 8003a2c:	20000174 	.word	0x20000174

08003a30 <__sfputc_r>:
 8003a30:	6893      	ldr	r3, [r2, #8]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	b410      	push	{r4}
 8003a38:	6093      	str	r3, [r2, #8]
 8003a3a:	da08      	bge.n	8003a4e <__sfputc_r+0x1e>
 8003a3c:	6994      	ldr	r4, [r2, #24]
 8003a3e:	42a3      	cmp	r3, r4
 8003a40:	db01      	blt.n	8003a46 <__sfputc_r+0x16>
 8003a42:	290a      	cmp	r1, #10
 8003a44:	d103      	bne.n	8003a4e <__sfputc_r+0x1e>
 8003a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a4a:	f000 baef 	b.w	800402c <__swbuf_r>
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	1c58      	adds	r0, r3, #1
 8003a52:	6010      	str	r0, [r2, #0]
 8003a54:	7019      	strb	r1, [r3, #0]
 8003a56:	4608      	mov	r0, r1
 8003a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <__sfputs_r>:
 8003a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a60:	4606      	mov	r6, r0
 8003a62:	460f      	mov	r7, r1
 8003a64:	4614      	mov	r4, r2
 8003a66:	18d5      	adds	r5, r2, r3
 8003a68:	42ac      	cmp	r4, r5
 8003a6a:	d101      	bne.n	8003a70 <__sfputs_r+0x12>
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	e007      	b.n	8003a80 <__sfputs_r+0x22>
 8003a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a74:	463a      	mov	r2, r7
 8003a76:	4630      	mov	r0, r6
 8003a78:	f7ff ffda 	bl	8003a30 <__sfputc_r>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d1f3      	bne.n	8003a68 <__sfputs_r+0xa>
 8003a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a84 <_vfiprintf_r>:
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	460d      	mov	r5, r1
 8003a8a:	b09d      	sub	sp, #116	; 0x74
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	4698      	mov	r8, r3
 8003a90:	4606      	mov	r6, r0
 8003a92:	b118      	cbz	r0, 8003a9c <_vfiprintf_r+0x18>
 8003a94:	6983      	ldr	r3, [r0, #24]
 8003a96:	b90b      	cbnz	r3, 8003a9c <_vfiprintf_r+0x18>
 8003a98:	f000 fcaa 	bl	80043f0 <__sinit>
 8003a9c:	4b89      	ldr	r3, [pc, #548]	; (8003cc4 <_vfiprintf_r+0x240>)
 8003a9e:	429d      	cmp	r5, r3
 8003aa0:	d11b      	bne.n	8003ada <_vfiprintf_r+0x56>
 8003aa2:	6875      	ldr	r5, [r6, #4]
 8003aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aa6:	07d9      	lsls	r1, r3, #31
 8003aa8:	d405      	bmi.n	8003ab6 <_vfiprintf_r+0x32>
 8003aaa:	89ab      	ldrh	r3, [r5, #12]
 8003aac:	059a      	lsls	r2, r3, #22
 8003aae:	d402      	bmi.n	8003ab6 <_vfiprintf_r+0x32>
 8003ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ab2:	f000 fd3b 	bl	800452c <__retarget_lock_acquire_recursive>
 8003ab6:	89ab      	ldrh	r3, [r5, #12]
 8003ab8:	071b      	lsls	r3, r3, #28
 8003aba:	d501      	bpl.n	8003ac0 <_vfiprintf_r+0x3c>
 8003abc:	692b      	ldr	r3, [r5, #16]
 8003abe:	b9eb      	cbnz	r3, 8003afc <_vfiprintf_r+0x78>
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 fb04 	bl	80040d0 <__swsetup_r>
 8003ac8:	b1c0      	cbz	r0, 8003afc <_vfiprintf_r+0x78>
 8003aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003acc:	07dc      	lsls	r4, r3, #31
 8003ace:	d50e      	bpl.n	8003aee <_vfiprintf_r+0x6a>
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	b01d      	add	sp, #116	; 0x74
 8003ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ada:	4b7b      	ldr	r3, [pc, #492]	; (8003cc8 <_vfiprintf_r+0x244>)
 8003adc:	429d      	cmp	r5, r3
 8003ade:	d101      	bne.n	8003ae4 <_vfiprintf_r+0x60>
 8003ae0:	68b5      	ldr	r5, [r6, #8]
 8003ae2:	e7df      	b.n	8003aa4 <_vfiprintf_r+0x20>
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <_vfiprintf_r+0x248>)
 8003ae6:	429d      	cmp	r5, r3
 8003ae8:	bf08      	it	eq
 8003aea:	68f5      	ldreq	r5, [r6, #12]
 8003aec:	e7da      	b.n	8003aa4 <_vfiprintf_r+0x20>
 8003aee:	89ab      	ldrh	r3, [r5, #12]
 8003af0:	0598      	lsls	r0, r3, #22
 8003af2:	d4ed      	bmi.n	8003ad0 <_vfiprintf_r+0x4c>
 8003af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003af6:	f000 fd1a 	bl	800452e <__retarget_lock_release_recursive>
 8003afa:	e7e9      	b.n	8003ad0 <_vfiprintf_r+0x4c>
 8003afc:	2300      	movs	r3, #0
 8003afe:	9309      	str	r3, [sp, #36]	; 0x24
 8003b00:	2320      	movs	r3, #32
 8003b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b0a:	2330      	movs	r3, #48	; 0x30
 8003b0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003cd0 <_vfiprintf_r+0x24c>
 8003b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b14:	f04f 0901 	mov.w	r9, #1
 8003b18:	4623      	mov	r3, r4
 8003b1a:	469a      	mov	sl, r3
 8003b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b20:	b10a      	cbz	r2, 8003b26 <_vfiprintf_r+0xa2>
 8003b22:	2a25      	cmp	r2, #37	; 0x25
 8003b24:	d1f9      	bne.n	8003b1a <_vfiprintf_r+0x96>
 8003b26:	ebba 0b04 	subs.w	fp, sl, r4
 8003b2a:	d00b      	beq.n	8003b44 <_vfiprintf_r+0xc0>
 8003b2c:	465b      	mov	r3, fp
 8003b2e:	4622      	mov	r2, r4
 8003b30:	4629      	mov	r1, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	f7ff ff93 	bl	8003a5e <__sfputs_r>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	f000 80aa 	beq.w	8003c92 <_vfiprintf_r+0x20e>
 8003b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b40:	445a      	add	r2, fp
 8003b42:	9209      	str	r2, [sp, #36]	; 0x24
 8003b44:	f89a 3000 	ldrb.w	r3, [sl]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a2 	beq.w	8003c92 <_vfiprintf_r+0x20e>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b58:	f10a 0a01 	add.w	sl, sl, #1
 8003b5c:	9304      	str	r3, [sp, #16]
 8003b5e:	9307      	str	r3, [sp, #28]
 8003b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b64:	931a      	str	r3, [sp, #104]	; 0x68
 8003b66:	4654      	mov	r4, sl
 8003b68:	2205      	movs	r2, #5
 8003b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6e:	4858      	ldr	r0, [pc, #352]	; (8003cd0 <_vfiprintf_r+0x24c>)
 8003b70:	f7fc fb4e 	bl	8000210 <memchr>
 8003b74:	9a04      	ldr	r2, [sp, #16]
 8003b76:	b9d8      	cbnz	r0, 8003bb0 <_vfiprintf_r+0x12c>
 8003b78:	06d1      	lsls	r1, r2, #27
 8003b7a:	bf44      	itt	mi
 8003b7c:	2320      	movmi	r3, #32
 8003b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b82:	0713      	lsls	r3, r2, #28
 8003b84:	bf44      	itt	mi
 8003b86:	232b      	movmi	r3, #43	; 0x2b
 8003b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b90:	2b2a      	cmp	r3, #42	; 0x2a
 8003b92:	d015      	beq.n	8003bc0 <_vfiprintf_r+0x13c>
 8003b94:	9a07      	ldr	r2, [sp, #28]
 8003b96:	4654      	mov	r4, sl
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f04f 0c0a 	mov.w	ip, #10
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba4:	3b30      	subs	r3, #48	; 0x30
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	d94e      	bls.n	8003c48 <_vfiprintf_r+0x1c4>
 8003baa:	b1b0      	cbz	r0, 8003bda <_vfiprintf_r+0x156>
 8003bac:	9207      	str	r2, [sp, #28]
 8003bae:	e014      	b.n	8003bda <_vfiprintf_r+0x156>
 8003bb0:	eba0 0308 	sub.w	r3, r0, r8
 8003bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	9304      	str	r3, [sp, #16]
 8003bbc:	46a2      	mov	sl, r4
 8003bbe:	e7d2      	b.n	8003b66 <_vfiprintf_r+0xe2>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	1d19      	adds	r1, r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	9103      	str	r1, [sp, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bfbb      	ittet	lt
 8003bcc:	425b      	neglt	r3, r3
 8003bce:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd2:	9307      	strge	r3, [sp, #28]
 8003bd4:	9307      	strlt	r3, [sp, #28]
 8003bd6:	bfb8      	it	lt
 8003bd8:	9204      	strlt	r2, [sp, #16]
 8003bda:	7823      	ldrb	r3, [r4, #0]
 8003bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8003bde:	d10c      	bne.n	8003bfa <_vfiprintf_r+0x176>
 8003be0:	7863      	ldrb	r3, [r4, #1]
 8003be2:	2b2a      	cmp	r3, #42	; 0x2a
 8003be4:	d135      	bne.n	8003c52 <_vfiprintf_r+0x1ce>
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	1d1a      	adds	r2, r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	9203      	str	r2, [sp, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bfb8      	it	lt
 8003bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bf6:	3402      	adds	r4, #2
 8003bf8:	9305      	str	r3, [sp, #20]
 8003bfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ce0 <_vfiprintf_r+0x25c>
 8003bfe:	7821      	ldrb	r1, [r4, #0]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4650      	mov	r0, sl
 8003c04:	f7fc fb04 	bl	8000210 <memchr>
 8003c08:	b140      	cbz	r0, 8003c1c <_vfiprintf_r+0x198>
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	eba0 000a 	sub.w	r0, r0, sl
 8003c10:	fa03 f000 	lsl.w	r0, r3, r0
 8003c14:	9b04      	ldr	r3, [sp, #16]
 8003c16:	4303      	orrs	r3, r0
 8003c18:	3401      	adds	r4, #1
 8003c1a:	9304      	str	r3, [sp, #16]
 8003c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c20:	482c      	ldr	r0, [pc, #176]	; (8003cd4 <_vfiprintf_r+0x250>)
 8003c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c26:	2206      	movs	r2, #6
 8003c28:	f7fc faf2 	bl	8000210 <memchr>
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d03f      	beq.n	8003cb0 <_vfiprintf_r+0x22c>
 8003c30:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <_vfiprintf_r+0x254>)
 8003c32:	bb1b      	cbnz	r3, 8003c7c <_vfiprintf_r+0x1f8>
 8003c34:	9b03      	ldr	r3, [sp, #12]
 8003c36:	3307      	adds	r3, #7
 8003c38:	f023 0307 	bic.w	r3, r3, #7
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	9303      	str	r3, [sp, #12]
 8003c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c42:	443b      	add	r3, r7
 8003c44:	9309      	str	r3, [sp, #36]	; 0x24
 8003c46:	e767      	b.n	8003b18 <_vfiprintf_r+0x94>
 8003c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	2001      	movs	r0, #1
 8003c50:	e7a5      	b.n	8003b9e <_vfiprintf_r+0x11a>
 8003c52:	2300      	movs	r3, #0
 8003c54:	3401      	adds	r4, #1
 8003c56:	9305      	str	r3, [sp, #20]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f04f 0c0a 	mov.w	ip, #10
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c64:	3a30      	subs	r2, #48	; 0x30
 8003c66:	2a09      	cmp	r2, #9
 8003c68:	d903      	bls.n	8003c72 <_vfiprintf_r+0x1ee>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0c5      	beq.n	8003bfa <_vfiprintf_r+0x176>
 8003c6e:	9105      	str	r1, [sp, #20]
 8003c70:	e7c3      	b.n	8003bfa <_vfiprintf_r+0x176>
 8003c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c76:	4604      	mov	r4, r0
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e7f0      	b.n	8003c5e <_vfiprintf_r+0x1da>
 8003c7c:	ab03      	add	r3, sp, #12
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	462a      	mov	r2, r5
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <_vfiprintf_r+0x258>)
 8003c84:	a904      	add	r1, sp, #16
 8003c86:	4630      	mov	r0, r6
 8003c88:	f3af 8000 	nop.w
 8003c8c:	4607      	mov	r7, r0
 8003c8e:	1c78      	adds	r0, r7, #1
 8003c90:	d1d6      	bne.n	8003c40 <_vfiprintf_r+0x1bc>
 8003c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c94:	07d9      	lsls	r1, r3, #31
 8003c96:	d405      	bmi.n	8003ca4 <_vfiprintf_r+0x220>
 8003c98:	89ab      	ldrh	r3, [r5, #12]
 8003c9a:	059a      	lsls	r2, r3, #22
 8003c9c:	d402      	bmi.n	8003ca4 <_vfiprintf_r+0x220>
 8003c9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ca0:	f000 fc45 	bl	800452e <__retarget_lock_release_recursive>
 8003ca4:	89ab      	ldrh	r3, [r5, #12]
 8003ca6:	065b      	lsls	r3, r3, #25
 8003ca8:	f53f af12 	bmi.w	8003ad0 <_vfiprintf_r+0x4c>
 8003cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cae:	e711      	b.n	8003ad4 <_vfiprintf_r+0x50>
 8003cb0:	ab03      	add	r3, sp, #12
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	462a      	mov	r2, r5
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <_vfiprintf_r+0x258>)
 8003cb8:	a904      	add	r1, sp, #16
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f000 f880 	bl	8003dc0 <_printf_i>
 8003cc0:	e7e4      	b.n	8003c8c <_vfiprintf_r+0x208>
 8003cc2:	bf00      	nop
 8003cc4:	080049a8 	.word	0x080049a8
 8003cc8:	080049c8 	.word	0x080049c8
 8003ccc:	08004988 	.word	0x08004988
 8003cd0:	08004952 	.word	0x08004952
 8003cd4:	0800495c 	.word	0x0800495c
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	08003a5f 	.word	0x08003a5f
 8003ce0:	08004958 	.word	0x08004958

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4616      	mov	r6, r2
 8003cea:	4699      	mov	r9, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bfb8      	it	lt
 8003cf8:	4613      	movlt	r3, r2
 8003cfa:	6033      	str	r3, [r6, #0]
 8003cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d00:	4607      	mov	r7, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	b10a      	cbz	r2, 8003d0a <_printf_common+0x26>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	0699      	lsls	r1, r3, #26
 8003d0e:	bf42      	ittt	mi
 8003d10:	6833      	ldrmi	r3, [r6, #0]
 8003d12:	3302      	addmi	r3, #2
 8003d14:	6033      	strmi	r3, [r6, #0]
 8003d16:	6825      	ldr	r5, [r4, #0]
 8003d18:	f015 0506 	ands.w	r5, r5, #6
 8003d1c:	d106      	bne.n	8003d2c <_printf_common+0x48>
 8003d1e:	f104 0a19 	add.w	sl, r4, #25
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	6832      	ldr	r2, [r6, #0]
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	42ab      	cmp	r3, r5
 8003d2a:	dc26      	bgt.n	8003d7a <_printf_common+0x96>
 8003d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d30:	1e13      	subs	r3, r2, #0
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	bf18      	it	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	0692      	lsls	r2, r2, #26
 8003d3a:	d42b      	bmi.n	8003d94 <_printf_common+0xb0>
 8003d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d40:	4649      	mov	r1, r9
 8003d42:	4638      	mov	r0, r7
 8003d44:	47c0      	blx	r8
 8003d46:	3001      	adds	r0, #1
 8003d48:	d01e      	beq.n	8003d88 <_printf_common+0xa4>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	68e5      	ldr	r5, [r4, #12]
 8003d4e:	6832      	ldr	r2, [r6, #0]
 8003d50:	f003 0306 	and.w	r3, r3, #6
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	bf08      	it	eq
 8003d58:	1aad      	subeq	r5, r5, r2
 8003d5a:	68a3      	ldr	r3, [r4, #8]
 8003d5c:	6922      	ldr	r2, [r4, #16]
 8003d5e:	bf0c      	ite	eq
 8003d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d64:	2500      	movne	r5, #0
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bfc4      	itt	gt
 8003d6a:	1a9b      	subgt	r3, r3, r2
 8003d6c:	18ed      	addgt	r5, r5, r3
 8003d6e:	2600      	movs	r6, #0
 8003d70:	341a      	adds	r4, #26
 8003d72:	42b5      	cmp	r5, r6
 8003d74:	d11a      	bne.n	8003dac <_printf_common+0xc8>
 8003d76:	2000      	movs	r0, #0
 8003d78:	e008      	b.n	8003d8c <_printf_common+0xa8>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4652      	mov	r2, sl
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4638      	mov	r0, r7
 8003d82:	47c0      	blx	r8
 8003d84:	3001      	adds	r0, #1
 8003d86:	d103      	bne.n	8003d90 <_printf_common+0xac>
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d90:	3501      	adds	r5, #1
 8003d92:	e7c6      	b.n	8003d22 <_printf_common+0x3e>
 8003d94:	18e1      	adds	r1, r4, r3
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	2030      	movs	r0, #48	; 0x30
 8003d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d9e:	4422      	add	r2, r4
 8003da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da8:	3302      	adds	r3, #2
 8003daa:	e7c7      	b.n	8003d3c <_printf_common+0x58>
 8003dac:	2301      	movs	r3, #1
 8003dae:	4622      	mov	r2, r4
 8003db0:	4649      	mov	r1, r9
 8003db2:	4638      	mov	r0, r7
 8003db4:	47c0      	blx	r8
 8003db6:	3001      	adds	r0, #1
 8003db8:	d0e6      	beq.n	8003d88 <_printf_common+0xa4>
 8003dba:	3601      	adds	r6, #1
 8003dbc:	e7d9      	b.n	8003d72 <_printf_common+0x8e>
	...

08003dc0 <_printf_i>:
 8003dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	7e0f      	ldrb	r7, [r1, #24]
 8003dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dc8:	2f78      	cmp	r7, #120	; 0x78
 8003dca:	4691      	mov	r9, r2
 8003dcc:	4680      	mov	r8, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dd6:	d807      	bhi.n	8003de8 <_printf_i+0x28>
 8003dd8:	2f62      	cmp	r7, #98	; 0x62
 8003dda:	d80a      	bhi.n	8003df2 <_printf_i+0x32>
 8003ddc:	2f00      	cmp	r7, #0
 8003dde:	f000 80d8 	beq.w	8003f92 <_printf_i+0x1d2>
 8003de2:	2f58      	cmp	r7, #88	; 0x58
 8003de4:	f000 80a3 	beq.w	8003f2e <_printf_i+0x16e>
 8003de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003df0:	e03a      	b.n	8003e68 <_printf_i+0xa8>
 8003df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003df6:	2b15      	cmp	r3, #21
 8003df8:	d8f6      	bhi.n	8003de8 <_printf_i+0x28>
 8003dfa:	a101      	add	r1, pc, #4	; (adr r1, 8003e00 <_printf_i+0x40>)
 8003dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e00:	08003e59 	.word	0x08003e59
 8003e04:	08003e6d 	.word	0x08003e6d
 8003e08:	08003de9 	.word	0x08003de9
 8003e0c:	08003de9 	.word	0x08003de9
 8003e10:	08003de9 	.word	0x08003de9
 8003e14:	08003de9 	.word	0x08003de9
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003de9 	.word	0x08003de9
 8003e20:	08003de9 	.word	0x08003de9
 8003e24:	08003de9 	.word	0x08003de9
 8003e28:	08003de9 	.word	0x08003de9
 8003e2c:	08003f79 	.word	0x08003f79
 8003e30:	08003e9d 	.word	0x08003e9d
 8003e34:	08003f5b 	.word	0x08003f5b
 8003e38:	08003de9 	.word	0x08003de9
 8003e3c:	08003de9 	.word	0x08003de9
 8003e40:	08003f9b 	.word	0x08003f9b
 8003e44:	08003de9 	.word	0x08003de9
 8003e48:	08003e9d 	.word	0x08003e9d
 8003e4c:	08003de9 	.word	0x08003de9
 8003e50:	08003de9 	.word	0x08003de9
 8003e54:	08003f63 	.word	0x08003f63
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	602a      	str	r2, [r5, #0]
 8003e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0a3      	b.n	8003fb4 <_printf_i+0x1f4>
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	6829      	ldr	r1, [r5, #0]
 8003e70:	0606      	lsls	r6, r0, #24
 8003e72:	f101 0304 	add.w	r3, r1, #4
 8003e76:	d50a      	bpl.n	8003e8e <_printf_i+0xce>
 8003e78:	680e      	ldr	r6, [r1, #0]
 8003e7a:	602b      	str	r3, [r5, #0]
 8003e7c:	2e00      	cmp	r6, #0
 8003e7e:	da03      	bge.n	8003e88 <_printf_i+0xc8>
 8003e80:	232d      	movs	r3, #45	; 0x2d
 8003e82:	4276      	negs	r6, r6
 8003e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e88:	485e      	ldr	r0, [pc, #376]	; (8004004 <_printf_i+0x244>)
 8003e8a:	230a      	movs	r3, #10
 8003e8c:	e019      	b.n	8003ec2 <_printf_i+0x102>
 8003e8e:	680e      	ldr	r6, [r1, #0]
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e96:	bf18      	it	ne
 8003e98:	b236      	sxthne	r6, r6
 8003e9a:	e7ef      	b.n	8003e7c <_printf_i+0xbc>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	6820      	ldr	r0, [r4, #0]
 8003ea0:	1d19      	adds	r1, r3, #4
 8003ea2:	6029      	str	r1, [r5, #0]
 8003ea4:	0601      	lsls	r1, r0, #24
 8003ea6:	d501      	bpl.n	8003eac <_printf_i+0xec>
 8003ea8:	681e      	ldr	r6, [r3, #0]
 8003eaa:	e002      	b.n	8003eb2 <_printf_i+0xf2>
 8003eac:	0646      	lsls	r6, r0, #25
 8003eae:	d5fb      	bpl.n	8003ea8 <_printf_i+0xe8>
 8003eb0:	881e      	ldrh	r6, [r3, #0]
 8003eb2:	4854      	ldr	r0, [pc, #336]	; (8004004 <_printf_i+0x244>)
 8003eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2308      	moveq	r3, #8
 8003eba:	230a      	movne	r3, #10
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ec2:	6865      	ldr	r5, [r4, #4]
 8003ec4:	60a5      	str	r5, [r4, #8]
 8003ec6:	2d00      	cmp	r5, #0
 8003ec8:	bfa2      	ittt	ge
 8003eca:	6821      	ldrge	r1, [r4, #0]
 8003ecc:	f021 0104 	bicge.w	r1, r1, #4
 8003ed0:	6021      	strge	r1, [r4, #0]
 8003ed2:	b90e      	cbnz	r6, 8003ed8 <_printf_i+0x118>
 8003ed4:	2d00      	cmp	r5, #0
 8003ed6:	d04d      	beq.n	8003f74 <_printf_i+0x1b4>
 8003ed8:	4615      	mov	r5, r2
 8003eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ede:	fb03 6711 	mls	r7, r3, r1, r6
 8003ee2:	5dc7      	ldrb	r7, [r0, r7]
 8003ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ee8:	4637      	mov	r7, r6
 8003eea:	42bb      	cmp	r3, r7
 8003eec:	460e      	mov	r6, r1
 8003eee:	d9f4      	bls.n	8003eda <_printf_i+0x11a>
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d10b      	bne.n	8003f0c <_printf_i+0x14c>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	07de      	lsls	r6, r3, #31
 8003ef8:	d508      	bpl.n	8003f0c <_printf_i+0x14c>
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	6861      	ldr	r1, [r4, #4]
 8003efe:	4299      	cmp	r1, r3
 8003f00:	bfde      	ittt	le
 8003f02:	2330      	movle	r3, #48	; 0x30
 8003f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f0c:	1b52      	subs	r2, r2, r5
 8003f0e:	6122      	str	r2, [r4, #16]
 8003f10:	f8cd a000 	str.w	sl, [sp]
 8003f14:	464b      	mov	r3, r9
 8003f16:	aa03      	add	r2, sp, #12
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f7ff fee2 	bl	8003ce4 <_printf_common>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d14c      	bne.n	8003fbe <_printf_i+0x1fe>
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	b004      	add	sp, #16
 8003f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2e:	4835      	ldr	r0, [pc, #212]	; (8004004 <_printf_i+0x244>)
 8003f30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f34:	6829      	ldr	r1, [r5, #0]
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f3c:	6029      	str	r1, [r5, #0]
 8003f3e:	061d      	lsls	r5, r3, #24
 8003f40:	d514      	bpl.n	8003f6c <_printf_i+0x1ac>
 8003f42:	07df      	lsls	r7, r3, #31
 8003f44:	bf44      	itt	mi
 8003f46:	f043 0320 	orrmi.w	r3, r3, #32
 8003f4a:	6023      	strmi	r3, [r4, #0]
 8003f4c:	b91e      	cbnz	r6, 8003f56 <_printf_i+0x196>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	f023 0320 	bic.w	r3, r3, #32
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	2310      	movs	r3, #16
 8003f58:	e7b0      	b.n	8003ebc <_printf_i+0xfc>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	f043 0320 	orr.w	r3, r3, #32
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	2378      	movs	r3, #120	; 0x78
 8003f64:	4828      	ldr	r0, [pc, #160]	; (8004008 <_printf_i+0x248>)
 8003f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f6a:	e7e3      	b.n	8003f34 <_printf_i+0x174>
 8003f6c:	0659      	lsls	r1, r3, #25
 8003f6e:	bf48      	it	mi
 8003f70:	b2b6      	uxthmi	r6, r6
 8003f72:	e7e6      	b.n	8003f42 <_printf_i+0x182>
 8003f74:	4615      	mov	r5, r2
 8003f76:	e7bb      	b.n	8003ef0 <_printf_i+0x130>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	6826      	ldr	r6, [r4, #0]
 8003f7c:	6961      	ldr	r1, [r4, #20]
 8003f7e:	1d18      	adds	r0, r3, #4
 8003f80:	6028      	str	r0, [r5, #0]
 8003f82:	0635      	lsls	r5, r6, #24
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	d501      	bpl.n	8003f8c <_printf_i+0x1cc>
 8003f88:	6019      	str	r1, [r3, #0]
 8003f8a:	e002      	b.n	8003f92 <_printf_i+0x1d2>
 8003f8c:	0670      	lsls	r0, r6, #25
 8003f8e:	d5fb      	bpl.n	8003f88 <_printf_i+0x1c8>
 8003f90:	8019      	strh	r1, [r3, #0]
 8003f92:	2300      	movs	r3, #0
 8003f94:	6123      	str	r3, [r4, #16]
 8003f96:	4615      	mov	r5, r2
 8003f98:	e7ba      	b.n	8003f10 <_printf_i+0x150>
 8003f9a:	682b      	ldr	r3, [r5, #0]
 8003f9c:	1d1a      	adds	r2, r3, #4
 8003f9e:	602a      	str	r2, [r5, #0]
 8003fa0:	681d      	ldr	r5, [r3, #0]
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f7fc f932 	bl	8000210 <memchr>
 8003fac:	b108      	cbz	r0, 8003fb2 <_printf_i+0x1f2>
 8003fae:	1b40      	subs	r0, r0, r5
 8003fb0:	6060      	str	r0, [r4, #4]
 8003fb2:	6863      	ldr	r3, [r4, #4]
 8003fb4:	6123      	str	r3, [r4, #16]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fbc:	e7a8      	b.n	8003f10 <_printf_i+0x150>
 8003fbe:	6923      	ldr	r3, [r4, #16]
 8003fc0:	462a      	mov	r2, r5
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	47d0      	blx	sl
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d0ab      	beq.n	8003f24 <_printf_i+0x164>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	079b      	lsls	r3, r3, #30
 8003fd0:	d413      	bmi.n	8003ffa <_printf_i+0x23a>
 8003fd2:	68e0      	ldr	r0, [r4, #12]
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	4298      	cmp	r0, r3
 8003fd8:	bfb8      	it	lt
 8003fda:	4618      	movlt	r0, r3
 8003fdc:	e7a4      	b.n	8003f28 <_printf_i+0x168>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	47d0      	blx	sl
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d09b      	beq.n	8003f24 <_printf_i+0x164>
 8003fec:	3501      	adds	r5, #1
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	9903      	ldr	r1, [sp, #12]
 8003ff2:	1a5b      	subs	r3, r3, r1
 8003ff4:	42ab      	cmp	r3, r5
 8003ff6:	dcf2      	bgt.n	8003fde <_printf_i+0x21e>
 8003ff8:	e7eb      	b.n	8003fd2 <_printf_i+0x212>
 8003ffa:	2500      	movs	r5, #0
 8003ffc:	f104 0619 	add.w	r6, r4, #25
 8004000:	e7f5      	b.n	8003fee <_printf_i+0x22e>
 8004002:	bf00      	nop
 8004004:	08004963 	.word	0x08004963
 8004008:	08004974 	.word	0x08004974

0800400c <_sbrk_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d06      	ldr	r5, [pc, #24]	; (8004028 <_sbrk_r+0x1c>)
 8004010:	2300      	movs	r3, #0
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	f7fd fa7e 	bl	8001518 <_sbrk>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_sbrk_r+0x1a>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_sbrk_r+0x1a>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	2000017c 	.word	0x2000017c

0800402c <__swbuf_r>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	460e      	mov	r6, r1
 8004030:	4614      	mov	r4, r2
 8004032:	4605      	mov	r5, r0
 8004034:	b118      	cbz	r0, 800403e <__swbuf_r+0x12>
 8004036:	6983      	ldr	r3, [r0, #24]
 8004038:	b90b      	cbnz	r3, 800403e <__swbuf_r+0x12>
 800403a:	f000 f9d9 	bl	80043f0 <__sinit>
 800403e:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <__swbuf_r+0x98>)
 8004040:	429c      	cmp	r4, r3
 8004042:	d12b      	bne.n	800409c <__swbuf_r+0x70>
 8004044:	686c      	ldr	r4, [r5, #4]
 8004046:	69a3      	ldr	r3, [r4, #24]
 8004048:	60a3      	str	r3, [r4, #8]
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	071a      	lsls	r2, r3, #28
 800404e:	d52f      	bpl.n	80040b0 <__swbuf_r+0x84>
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	b36b      	cbz	r3, 80040b0 <__swbuf_r+0x84>
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	1ac0      	subs	r0, r0, r3
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	b2f6      	uxtb	r6, r6
 800405e:	4283      	cmp	r3, r0
 8004060:	4637      	mov	r7, r6
 8004062:	dc04      	bgt.n	800406e <__swbuf_r+0x42>
 8004064:	4621      	mov	r1, r4
 8004066:	4628      	mov	r0, r5
 8004068:	f000 f92e 	bl	80042c8 <_fflush_r>
 800406c:	bb30      	cbnz	r0, 80040bc <__swbuf_r+0x90>
 800406e:	68a3      	ldr	r3, [r4, #8]
 8004070:	3b01      	subs	r3, #1
 8004072:	60a3      	str	r3, [r4, #8]
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	701e      	strb	r6, [r3, #0]
 800407c:	6963      	ldr	r3, [r4, #20]
 800407e:	3001      	adds	r0, #1
 8004080:	4283      	cmp	r3, r0
 8004082:	d004      	beq.n	800408e <__swbuf_r+0x62>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	07db      	lsls	r3, r3, #31
 8004088:	d506      	bpl.n	8004098 <__swbuf_r+0x6c>
 800408a:	2e0a      	cmp	r6, #10
 800408c:	d104      	bne.n	8004098 <__swbuf_r+0x6c>
 800408e:	4621      	mov	r1, r4
 8004090:	4628      	mov	r0, r5
 8004092:	f000 f919 	bl	80042c8 <_fflush_r>
 8004096:	b988      	cbnz	r0, 80040bc <__swbuf_r+0x90>
 8004098:	4638      	mov	r0, r7
 800409a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <__swbuf_r+0x9c>)
 800409e:	429c      	cmp	r4, r3
 80040a0:	d101      	bne.n	80040a6 <__swbuf_r+0x7a>
 80040a2:	68ac      	ldr	r4, [r5, #8]
 80040a4:	e7cf      	b.n	8004046 <__swbuf_r+0x1a>
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <__swbuf_r+0xa0>)
 80040a8:	429c      	cmp	r4, r3
 80040aa:	bf08      	it	eq
 80040ac:	68ec      	ldreq	r4, [r5, #12]
 80040ae:	e7ca      	b.n	8004046 <__swbuf_r+0x1a>
 80040b0:	4621      	mov	r1, r4
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 f80c 	bl	80040d0 <__swsetup_r>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d0cb      	beq.n	8004054 <__swbuf_r+0x28>
 80040bc:	f04f 37ff 	mov.w	r7, #4294967295
 80040c0:	e7ea      	b.n	8004098 <__swbuf_r+0x6c>
 80040c2:	bf00      	nop
 80040c4:	080049a8 	.word	0x080049a8
 80040c8:	080049c8 	.word	0x080049c8
 80040cc:	08004988 	.word	0x08004988

080040d0 <__swsetup_r>:
 80040d0:	4b32      	ldr	r3, [pc, #200]	; (800419c <__swsetup_r+0xcc>)
 80040d2:	b570      	push	{r4, r5, r6, lr}
 80040d4:	681d      	ldr	r5, [r3, #0]
 80040d6:	4606      	mov	r6, r0
 80040d8:	460c      	mov	r4, r1
 80040da:	b125      	cbz	r5, 80040e6 <__swsetup_r+0x16>
 80040dc:	69ab      	ldr	r3, [r5, #24]
 80040de:	b913      	cbnz	r3, 80040e6 <__swsetup_r+0x16>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f985 	bl	80043f0 <__sinit>
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <__swsetup_r+0xd0>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d10f      	bne.n	800410c <__swsetup_r+0x3c>
 80040ec:	686c      	ldr	r4, [r5, #4]
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040f4:	0719      	lsls	r1, r3, #28
 80040f6:	d42c      	bmi.n	8004152 <__swsetup_r+0x82>
 80040f8:	06dd      	lsls	r5, r3, #27
 80040fa:	d411      	bmi.n	8004120 <__swsetup_r+0x50>
 80040fc:	2309      	movs	r3, #9
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	f04f 30ff 	mov.w	r0, #4294967295
 800410a:	e03e      	b.n	800418a <__swsetup_r+0xba>
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <__swsetup_r+0xd4>)
 800410e:	429c      	cmp	r4, r3
 8004110:	d101      	bne.n	8004116 <__swsetup_r+0x46>
 8004112:	68ac      	ldr	r4, [r5, #8]
 8004114:	e7eb      	b.n	80040ee <__swsetup_r+0x1e>
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <__swsetup_r+0xd8>)
 8004118:	429c      	cmp	r4, r3
 800411a:	bf08      	it	eq
 800411c:	68ec      	ldreq	r4, [r5, #12]
 800411e:	e7e6      	b.n	80040ee <__swsetup_r+0x1e>
 8004120:	0758      	lsls	r0, r3, #29
 8004122:	d512      	bpl.n	800414a <__swsetup_r+0x7a>
 8004124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004126:	b141      	cbz	r1, 800413a <__swsetup_r+0x6a>
 8004128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800412c:	4299      	cmp	r1, r3
 800412e:	d002      	beq.n	8004136 <__swsetup_r+0x66>
 8004130:	4630      	mov	r0, r6
 8004132:	f7ff fb9d 	bl	8003870 <_free_r>
 8004136:	2300      	movs	r3, #0
 8004138:	6363      	str	r3, [r4, #52]	; 0x34
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004140:	81a3      	strh	r3, [r4, #12]
 8004142:	2300      	movs	r3, #0
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	f043 0308 	orr.w	r3, r3, #8
 8004150:	81a3      	strh	r3, [r4, #12]
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	b94b      	cbnz	r3, 800416a <__swsetup_r+0x9a>
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d003      	beq.n	800416a <__swsetup_r+0x9a>
 8004162:	4621      	mov	r1, r4
 8004164:	4630      	mov	r0, r6
 8004166:	f000 fa09 	bl	800457c <__smakebuf_r>
 800416a:	89a0      	ldrh	r0, [r4, #12]
 800416c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004170:	f010 0301 	ands.w	r3, r0, #1
 8004174:	d00a      	beq.n	800418c <__swsetup_r+0xbc>
 8004176:	2300      	movs	r3, #0
 8004178:	60a3      	str	r3, [r4, #8]
 800417a:	6963      	ldr	r3, [r4, #20]
 800417c:	425b      	negs	r3, r3
 800417e:	61a3      	str	r3, [r4, #24]
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	b943      	cbnz	r3, 8004196 <__swsetup_r+0xc6>
 8004184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004188:	d1ba      	bne.n	8004100 <__swsetup_r+0x30>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	0781      	lsls	r1, r0, #30
 800418e:	bf58      	it	pl
 8004190:	6963      	ldrpl	r3, [r4, #20]
 8004192:	60a3      	str	r3, [r4, #8]
 8004194:	e7f4      	b.n	8004180 <__swsetup_r+0xb0>
 8004196:	2000      	movs	r0, #0
 8004198:	e7f7      	b.n	800418a <__swsetup_r+0xba>
 800419a:	bf00      	nop
 800419c:	2000004c 	.word	0x2000004c
 80041a0:	080049a8 	.word	0x080049a8
 80041a4:	080049c8 	.word	0x080049c8
 80041a8:	08004988 	.word	0x08004988

080041ac <abort>:
 80041ac:	b508      	push	{r3, lr}
 80041ae:	2006      	movs	r0, #6
 80041b0:	f000 fa58 	bl	8004664 <raise>
 80041b4:	2001      	movs	r0, #1
 80041b6:	f7fd f937 	bl	8001428 <_exit>
	...

080041bc <__sflush_r>:
 80041bc:	898a      	ldrh	r2, [r1, #12]
 80041be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c2:	4605      	mov	r5, r0
 80041c4:	0710      	lsls	r0, r2, #28
 80041c6:	460c      	mov	r4, r1
 80041c8:	d458      	bmi.n	800427c <__sflush_r+0xc0>
 80041ca:	684b      	ldr	r3, [r1, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	dc05      	bgt.n	80041dc <__sflush_r+0x20>
 80041d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dc02      	bgt.n	80041dc <__sflush_r+0x20>
 80041d6:	2000      	movs	r0, #0
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041de:	2e00      	cmp	r6, #0
 80041e0:	d0f9      	beq.n	80041d6 <__sflush_r+0x1a>
 80041e2:	2300      	movs	r3, #0
 80041e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041e8:	682f      	ldr	r7, [r5, #0]
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	d032      	beq.n	8004254 <__sflush_r+0x98>
 80041ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	075a      	lsls	r2, r3, #29
 80041f4:	d505      	bpl.n	8004202 <__sflush_r+0x46>
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	1ac0      	subs	r0, r0, r3
 80041fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041fc:	b10b      	cbz	r3, 8004202 <__sflush_r+0x46>
 80041fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004200:	1ac0      	subs	r0, r0, r3
 8004202:	2300      	movs	r3, #0
 8004204:	4602      	mov	r2, r0
 8004206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004208:	6a21      	ldr	r1, [r4, #32]
 800420a:	4628      	mov	r0, r5
 800420c:	47b0      	blx	r6
 800420e:	1c43      	adds	r3, r0, #1
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	d106      	bne.n	8004222 <__sflush_r+0x66>
 8004214:	6829      	ldr	r1, [r5, #0]
 8004216:	291d      	cmp	r1, #29
 8004218:	d82c      	bhi.n	8004274 <__sflush_r+0xb8>
 800421a:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <__sflush_r+0x108>)
 800421c:	40ca      	lsrs	r2, r1
 800421e:	07d6      	lsls	r6, r2, #31
 8004220:	d528      	bpl.n	8004274 <__sflush_r+0xb8>
 8004222:	2200      	movs	r2, #0
 8004224:	6062      	str	r2, [r4, #4]
 8004226:	04d9      	lsls	r1, r3, #19
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	d504      	bpl.n	8004238 <__sflush_r+0x7c>
 800422e:	1c42      	adds	r2, r0, #1
 8004230:	d101      	bne.n	8004236 <__sflush_r+0x7a>
 8004232:	682b      	ldr	r3, [r5, #0]
 8004234:	b903      	cbnz	r3, 8004238 <__sflush_r+0x7c>
 8004236:	6560      	str	r0, [r4, #84]	; 0x54
 8004238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800423a:	602f      	str	r7, [r5, #0]
 800423c:	2900      	cmp	r1, #0
 800423e:	d0ca      	beq.n	80041d6 <__sflush_r+0x1a>
 8004240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004244:	4299      	cmp	r1, r3
 8004246:	d002      	beq.n	800424e <__sflush_r+0x92>
 8004248:	4628      	mov	r0, r5
 800424a:	f7ff fb11 	bl	8003870 <_free_r>
 800424e:	2000      	movs	r0, #0
 8004250:	6360      	str	r0, [r4, #52]	; 0x34
 8004252:	e7c1      	b.n	80041d8 <__sflush_r+0x1c>
 8004254:	6a21      	ldr	r1, [r4, #32]
 8004256:	2301      	movs	r3, #1
 8004258:	4628      	mov	r0, r5
 800425a:	47b0      	blx	r6
 800425c:	1c41      	adds	r1, r0, #1
 800425e:	d1c7      	bne.n	80041f0 <__sflush_r+0x34>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0c4      	beq.n	80041f0 <__sflush_r+0x34>
 8004266:	2b1d      	cmp	r3, #29
 8004268:	d001      	beq.n	800426e <__sflush_r+0xb2>
 800426a:	2b16      	cmp	r3, #22
 800426c:	d101      	bne.n	8004272 <__sflush_r+0xb6>
 800426e:	602f      	str	r7, [r5, #0]
 8004270:	e7b1      	b.n	80041d6 <__sflush_r+0x1a>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	e7ad      	b.n	80041d8 <__sflush_r+0x1c>
 800427c:	690f      	ldr	r7, [r1, #16]
 800427e:	2f00      	cmp	r7, #0
 8004280:	d0a9      	beq.n	80041d6 <__sflush_r+0x1a>
 8004282:	0793      	lsls	r3, r2, #30
 8004284:	680e      	ldr	r6, [r1, #0]
 8004286:	bf08      	it	eq
 8004288:	694b      	ldreq	r3, [r1, #20]
 800428a:	600f      	str	r7, [r1, #0]
 800428c:	bf18      	it	ne
 800428e:	2300      	movne	r3, #0
 8004290:	eba6 0807 	sub.w	r8, r6, r7
 8004294:	608b      	str	r3, [r1, #8]
 8004296:	f1b8 0f00 	cmp.w	r8, #0
 800429a:	dd9c      	ble.n	80041d6 <__sflush_r+0x1a>
 800429c:	6a21      	ldr	r1, [r4, #32]
 800429e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042a0:	4643      	mov	r3, r8
 80042a2:	463a      	mov	r2, r7
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b0      	blx	r6
 80042a8:	2800      	cmp	r0, #0
 80042aa:	dc06      	bgt.n	80042ba <__sflush_r+0xfe>
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	e78e      	b.n	80041d8 <__sflush_r+0x1c>
 80042ba:	4407      	add	r7, r0
 80042bc:	eba8 0800 	sub.w	r8, r8, r0
 80042c0:	e7e9      	b.n	8004296 <__sflush_r+0xda>
 80042c2:	bf00      	nop
 80042c4:	20400001 	.word	0x20400001

080042c8 <_fflush_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	690b      	ldr	r3, [r1, #16]
 80042cc:	4605      	mov	r5, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	b913      	cbnz	r3, 80042d8 <_fflush_r+0x10>
 80042d2:	2500      	movs	r5, #0
 80042d4:	4628      	mov	r0, r5
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	b118      	cbz	r0, 80042e2 <_fflush_r+0x1a>
 80042da:	6983      	ldr	r3, [r0, #24]
 80042dc:	b90b      	cbnz	r3, 80042e2 <_fflush_r+0x1a>
 80042de:	f000 f887 	bl	80043f0 <__sinit>
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <_fflush_r+0x6c>)
 80042e4:	429c      	cmp	r4, r3
 80042e6:	d11b      	bne.n	8004320 <_fflush_r+0x58>
 80042e8:	686c      	ldr	r4, [r5, #4]
 80042ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0ef      	beq.n	80042d2 <_fflush_r+0xa>
 80042f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042f4:	07d0      	lsls	r0, r2, #31
 80042f6:	d404      	bmi.n	8004302 <_fflush_r+0x3a>
 80042f8:	0599      	lsls	r1, r3, #22
 80042fa:	d402      	bmi.n	8004302 <_fflush_r+0x3a>
 80042fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042fe:	f000 f915 	bl	800452c <__retarget_lock_acquire_recursive>
 8004302:	4628      	mov	r0, r5
 8004304:	4621      	mov	r1, r4
 8004306:	f7ff ff59 	bl	80041bc <__sflush_r>
 800430a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800430c:	07da      	lsls	r2, r3, #31
 800430e:	4605      	mov	r5, r0
 8004310:	d4e0      	bmi.n	80042d4 <_fflush_r+0xc>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	059b      	lsls	r3, r3, #22
 8004316:	d4dd      	bmi.n	80042d4 <_fflush_r+0xc>
 8004318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800431a:	f000 f908 	bl	800452e <__retarget_lock_release_recursive>
 800431e:	e7d9      	b.n	80042d4 <_fflush_r+0xc>
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <_fflush_r+0x70>)
 8004322:	429c      	cmp	r4, r3
 8004324:	d101      	bne.n	800432a <_fflush_r+0x62>
 8004326:	68ac      	ldr	r4, [r5, #8]
 8004328:	e7df      	b.n	80042ea <_fflush_r+0x22>
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <_fflush_r+0x74>)
 800432c:	429c      	cmp	r4, r3
 800432e:	bf08      	it	eq
 8004330:	68ec      	ldreq	r4, [r5, #12]
 8004332:	e7da      	b.n	80042ea <_fflush_r+0x22>
 8004334:	080049a8 	.word	0x080049a8
 8004338:	080049c8 	.word	0x080049c8
 800433c:	08004988 	.word	0x08004988

08004340 <std>:
 8004340:	2300      	movs	r3, #0
 8004342:	b510      	push	{r4, lr}
 8004344:	4604      	mov	r4, r0
 8004346:	e9c0 3300 	strd	r3, r3, [r0]
 800434a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800434e:	6083      	str	r3, [r0, #8]
 8004350:	8181      	strh	r1, [r0, #12]
 8004352:	6643      	str	r3, [r0, #100]	; 0x64
 8004354:	81c2      	strh	r2, [r0, #14]
 8004356:	6183      	str	r3, [r0, #24]
 8004358:	4619      	mov	r1, r3
 800435a:	2208      	movs	r2, #8
 800435c:	305c      	adds	r0, #92	; 0x5c
 800435e:	f7ff f9af 	bl	80036c0 <memset>
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <std+0x38>)
 8004364:	6263      	str	r3, [r4, #36]	; 0x24
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <std+0x3c>)
 8004368:	62a3      	str	r3, [r4, #40]	; 0x28
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <std+0x40>)
 800436c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <std+0x44>)
 8004370:	6224      	str	r4, [r4, #32]
 8004372:	6323      	str	r3, [r4, #48]	; 0x30
 8004374:	bd10      	pop	{r4, pc}
 8004376:	bf00      	nop
 8004378:	0800469d 	.word	0x0800469d
 800437c:	080046bf 	.word	0x080046bf
 8004380:	080046f7 	.word	0x080046f7
 8004384:	0800471b 	.word	0x0800471b

08004388 <_cleanup_r>:
 8004388:	4901      	ldr	r1, [pc, #4]	; (8004390 <_cleanup_r+0x8>)
 800438a:	f000 b8af 	b.w	80044ec <_fwalk_reent>
 800438e:	bf00      	nop
 8004390:	080042c9 	.word	0x080042c9

08004394 <__sfmoreglue>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	2268      	movs	r2, #104	; 0x68
 8004398:	1e4d      	subs	r5, r1, #1
 800439a:	4355      	muls	r5, r2
 800439c:	460e      	mov	r6, r1
 800439e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043a2:	f7ff fad1 	bl	8003948 <_malloc_r>
 80043a6:	4604      	mov	r4, r0
 80043a8:	b140      	cbz	r0, 80043bc <__sfmoreglue+0x28>
 80043aa:	2100      	movs	r1, #0
 80043ac:	e9c0 1600 	strd	r1, r6, [r0]
 80043b0:	300c      	adds	r0, #12
 80043b2:	60a0      	str	r0, [r4, #8]
 80043b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043b8:	f7ff f982 	bl	80036c0 <memset>
 80043bc:	4620      	mov	r0, r4
 80043be:	bd70      	pop	{r4, r5, r6, pc}

080043c0 <__sfp_lock_acquire>:
 80043c0:	4801      	ldr	r0, [pc, #4]	; (80043c8 <__sfp_lock_acquire+0x8>)
 80043c2:	f000 b8b3 	b.w	800452c <__retarget_lock_acquire_recursive>
 80043c6:	bf00      	nop
 80043c8:	20000181 	.word	0x20000181

080043cc <__sfp_lock_release>:
 80043cc:	4801      	ldr	r0, [pc, #4]	; (80043d4 <__sfp_lock_release+0x8>)
 80043ce:	f000 b8ae 	b.w	800452e <__retarget_lock_release_recursive>
 80043d2:	bf00      	nop
 80043d4:	20000181 	.word	0x20000181

080043d8 <__sinit_lock_acquire>:
 80043d8:	4801      	ldr	r0, [pc, #4]	; (80043e0 <__sinit_lock_acquire+0x8>)
 80043da:	f000 b8a7 	b.w	800452c <__retarget_lock_acquire_recursive>
 80043de:	bf00      	nop
 80043e0:	20000182 	.word	0x20000182

080043e4 <__sinit_lock_release>:
 80043e4:	4801      	ldr	r0, [pc, #4]	; (80043ec <__sinit_lock_release+0x8>)
 80043e6:	f000 b8a2 	b.w	800452e <__retarget_lock_release_recursive>
 80043ea:	bf00      	nop
 80043ec:	20000182 	.word	0x20000182

080043f0 <__sinit>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	f7ff fff0 	bl	80043d8 <__sinit_lock_acquire>
 80043f8:	69a3      	ldr	r3, [r4, #24]
 80043fa:	b11b      	cbz	r3, 8004404 <__sinit+0x14>
 80043fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004400:	f7ff bff0 	b.w	80043e4 <__sinit_lock_release>
 8004404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004408:	6523      	str	r3, [r4, #80]	; 0x50
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <__sinit+0x68>)
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <__sinit+0x6c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	62a2      	str	r2, [r4, #40]	; 0x28
 8004412:	42a3      	cmp	r3, r4
 8004414:	bf04      	itt	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	61a3      	streq	r3, [r4, #24]
 800441a:	4620      	mov	r0, r4
 800441c:	f000 f820 	bl	8004460 <__sfp>
 8004420:	6060      	str	r0, [r4, #4]
 8004422:	4620      	mov	r0, r4
 8004424:	f000 f81c 	bl	8004460 <__sfp>
 8004428:	60a0      	str	r0, [r4, #8]
 800442a:	4620      	mov	r0, r4
 800442c:	f000 f818 	bl	8004460 <__sfp>
 8004430:	2200      	movs	r2, #0
 8004432:	60e0      	str	r0, [r4, #12]
 8004434:	2104      	movs	r1, #4
 8004436:	6860      	ldr	r0, [r4, #4]
 8004438:	f7ff ff82 	bl	8004340 <std>
 800443c:	68a0      	ldr	r0, [r4, #8]
 800443e:	2201      	movs	r2, #1
 8004440:	2109      	movs	r1, #9
 8004442:	f7ff ff7d 	bl	8004340 <std>
 8004446:	68e0      	ldr	r0, [r4, #12]
 8004448:	2202      	movs	r2, #2
 800444a:	2112      	movs	r1, #18
 800444c:	f7ff ff78 	bl	8004340 <std>
 8004450:	2301      	movs	r3, #1
 8004452:	61a3      	str	r3, [r4, #24]
 8004454:	e7d2      	b.n	80043fc <__sinit+0xc>
 8004456:	bf00      	nop
 8004458:	080048a0 	.word	0x080048a0
 800445c:	08004389 	.word	0x08004389

08004460 <__sfp>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	4607      	mov	r7, r0
 8004464:	f7ff ffac 	bl	80043c0 <__sfp_lock_acquire>
 8004468:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <__sfp+0x84>)
 800446a:	681e      	ldr	r6, [r3, #0]
 800446c:	69b3      	ldr	r3, [r6, #24]
 800446e:	b913      	cbnz	r3, 8004476 <__sfp+0x16>
 8004470:	4630      	mov	r0, r6
 8004472:	f7ff ffbd 	bl	80043f0 <__sinit>
 8004476:	3648      	adds	r6, #72	; 0x48
 8004478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800447c:	3b01      	subs	r3, #1
 800447e:	d503      	bpl.n	8004488 <__sfp+0x28>
 8004480:	6833      	ldr	r3, [r6, #0]
 8004482:	b30b      	cbz	r3, 80044c8 <__sfp+0x68>
 8004484:	6836      	ldr	r6, [r6, #0]
 8004486:	e7f7      	b.n	8004478 <__sfp+0x18>
 8004488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800448c:	b9d5      	cbnz	r5, 80044c4 <__sfp+0x64>
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <__sfp+0x88>)
 8004490:	60e3      	str	r3, [r4, #12]
 8004492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004496:	6665      	str	r5, [r4, #100]	; 0x64
 8004498:	f000 f847 	bl	800452a <__retarget_lock_init_recursive>
 800449c:	f7ff ff96 	bl	80043cc <__sfp_lock_release>
 80044a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044a8:	6025      	str	r5, [r4, #0]
 80044aa:	61a5      	str	r5, [r4, #24]
 80044ac:	2208      	movs	r2, #8
 80044ae:	4629      	mov	r1, r5
 80044b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044b4:	f7ff f904 	bl	80036c0 <memset>
 80044b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044c0:	4620      	mov	r0, r4
 80044c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c4:	3468      	adds	r4, #104	; 0x68
 80044c6:	e7d9      	b.n	800447c <__sfp+0x1c>
 80044c8:	2104      	movs	r1, #4
 80044ca:	4638      	mov	r0, r7
 80044cc:	f7ff ff62 	bl	8004394 <__sfmoreglue>
 80044d0:	4604      	mov	r4, r0
 80044d2:	6030      	str	r0, [r6, #0]
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d1d5      	bne.n	8004484 <__sfp+0x24>
 80044d8:	f7ff ff78 	bl	80043cc <__sfp_lock_release>
 80044dc:	230c      	movs	r3, #12
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	e7ee      	b.n	80044c0 <__sfp+0x60>
 80044e2:	bf00      	nop
 80044e4:	080048a0 	.word	0x080048a0
 80044e8:	ffff0001 	.word	0xffff0001

080044ec <_fwalk_reent>:
 80044ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f0:	4606      	mov	r6, r0
 80044f2:	4688      	mov	r8, r1
 80044f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044f8:	2700      	movs	r7, #0
 80044fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044fe:	f1b9 0901 	subs.w	r9, r9, #1
 8004502:	d505      	bpl.n	8004510 <_fwalk_reent+0x24>
 8004504:	6824      	ldr	r4, [r4, #0]
 8004506:	2c00      	cmp	r4, #0
 8004508:	d1f7      	bne.n	80044fa <_fwalk_reent+0xe>
 800450a:	4638      	mov	r0, r7
 800450c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004510:	89ab      	ldrh	r3, [r5, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d907      	bls.n	8004526 <_fwalk_reent+0x3a>
 8004516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800451a:	3301      	adds	r3, #1
 800451c:	d003      	beq.n	8004526 <_fwalk_reent+0x3a>
 800451e:	4629      	mov	r1, r5
 8004520:	4630      	mov	r0, r6
 8004522:	47c0      	blx	r8
 8004524:	4307      	orrs	r7, r0
 8004526:	3568      	adds	r5, #104	; 0x68
 8004528:	e7e9      	b.n	80044fe <_fwalk_reent+0x12>

0800452a <__retarget_lock_init_recursive>:
 800452a:	4770      	bx	lr

0800452c <__retarget_lock_acquire_recursive>:
 800452c:	4770      	bx	lr

0800452e <__retarget_lock_release_recursive>:
 800452e:	4770      	bx	lr

08004530 <__swhatbuf_r>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	460e      	mov	r6, r1
 8004534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004538:	2900      	cmp	r1, #0
 800453a:	b096      	sub	sp, #88	; 0x58
 800453c:	4614      	mov	r4, r2
 800453e:	461d      	mov	r5, r3
 8004540:	da08      	bge.n	8004554 <__swhatbuf_r+0x24>
 8004542:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	602a      	str	r2, [r5, #0]
 800454a:	061a      	lsls	r2, r3, #24
 800454c:	d410      	bmi.n	8004570 <__swhatbuf_r+0x40>
 800454e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004552:	e00e      	b.n	8004572 <__swhatbuf_r+0x42>
 8004554:	466a      	mov	r2, sp
 8004556:	f000 f907 	bl	8004768 <_fstat_r>
 800455a:	2800      	cmp	r0, #0
 800455c:	dbf1      	blt.n	8004542 <__swhatbuf_r+0x12>
 800455e:	9a01      	ldr	r2, [sp, #4]
 8004560:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004564:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004568:	425a      	negs	r2, r3
 800456a:	415a      	adcs	r2, r3
 800456c:	602a      	str	r2, [r5, #0]
 800456e:	e7ee      	b.n	800454e <__swhatbuf_r+0x1e>
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	2000      	movs	r0, #0
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	b016      	add	sp, #88	; 0x58
 8004578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800457c <__smakebuf_r>:
 800457c:	898b      	ldrh	r3, [r1, #12]
 800457e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004580:	079d      	lsls	r5, r3, #30
 8004582:	4606      	mov	r6, r0
 8004584:	460c      	mov	r4, r1
 8004586:	d507      	bpl.n	8004598 <__smakebuf_r+0x1c>
 8004588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	6123      	str	r3, [r4, #16]
 8004590:	2301      	movs	r3, #1
 8004592:	6163      	str	r3, [r4, #20]
 8004594:	b002      	add	sp, #8
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	ab01      	add	r3, sp, #4
 800459a:	466a      	mov	r2, sp
 800459c:	f7ff ffc8 	bl	8004530 <__swhatbuf_r>
 80045a0:	9900      	ldr	r1, [sp, #0]
 80045a2:	4605      	mov	r5, r0
 80045a4:	4630      	mov	r0, r6
 80045a6:	f7ff f9cf 	bl	8003948 <_malloc_r>
 80045aa:	b948      	cbnz	r0, 80045c0 <__smakebuf_r+0x44>
 80045ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b0:	059a      	lsls	r2, r3, #22
 80045b2:	d4ef      	bmi.n	8004594 <__smakebuf_r+0x18>
 80045b4:	f023 0303 	bic.w	r3, r3, #3
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	81a3      	strh	r3, [r4, #12]
 80045be:	e7e3      	b.n	8004588 <__smakebuf_r+0xc>
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <__smakebuf_r+0x7c>)
 80045c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	6020      	str	r0, [r4, #0]
 80045c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045cc:	81a3      	strh	r3, [r4, #12]
 80045ce:	9b00      	ldr	r3, [sp, #0]
 80045d0:	6163      	str	r3, [r4, #20]
 80045d2:	9b01      	ldr	r3, [sp, #4]
 80045d4:	6120      	str	r0, [r4, #16]
 80045d6:	b15b      	cbz	r3, 80045f0 <__smakebuf_r+0x74>
 80045d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 f8d5 	bl	800478c <_isatty_r>
 80045e2:	b128      	cbz	r0, 80045f0 <__smakebuf_r+0x74>
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	89a0      	ldrh	r0, [r4, #12]
 80045f2:	4305      	orrs	r5, r0
 80045f4:	81a5      	strh	r5, [r4, #12]
 80045f6:	e7cd      	b.n	8004594 <__smakebuf_r+0x18>
 80045f8:	08004389 	.word	0x08004389

080045fc <__malloc_lock>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__malloc_lock+0x8>)
 80045fe:	f7ff bf95 	b.w	800452c <__retarget_lock_acquire_recursive>
 8004602:	bf00      	nop
 8004604:	20000180 	.word	0x20000180

08004608 <__malloc_unlock>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__malloc_unlock+0x8>)
 800460a:	f7ff bf90 	b.w	800452e <__retarget_lock_release_recursive>
 800460e:	bf00      	nop
 8004610:	20000180 	.word	0x20000180

08004614 <_raise_r>:
 8004614:	291f      	cmp	r1, #31
 8004616:	b538      	push	{r3, r4, r5, lr}
 8004618:	4604      	mov	r4, r0
 800461a:	460d      	mov	r5, r1
 800461c:	d904      	bls.n	8004628 <_raise_r+0x14>
 800461e:	2316      	movs	r3, #22
 8004620:	6003      	str	r3, [r0, #0]
 8004622:	f04f 30ff 	mov.w	r0, #4294967295
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800462a:	b112      	cbz	r2, 8004632 <_raise_r+0x1e>
 800462c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004630:	b94b      	cbnz	r3, 8004646 <_raise_r+0x32>
 8004632:	4620      	mov	r0, r4
 8004634:	f000 f830 	bl	8004698 <_getpid_r>
 8004638:	462a      	mov	r2, r5
 800463a:	4601      	mov	r1, r0
 800463c:	4620      	mov	r0, r4
 800463e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004642:	f000 b817 	b.w	8004674 <_kill_r>
 8004646:	2b01      	cmp	r3, #1
 8004648:	d00a      	beq.n	8004660 <_raise_r+0x4c>
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	d103      	bne.n	8004656 <_raise_r+0x42>
 800464e:	2316      	movs	r3, #22
 8004650:	6003      	str	r3, [r0, #0]
 8004652:	2001      	movs	r0, #1
 8004654:	e7e7      	b.n	8004626 <_raise_r+0x12>
 8004656:	2400      	movs	r4, #0
 8004658:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800465c:	4628      	mov	r0, r5
 800465e:	4798      	blx	r3
 8004660:	2000      	movs	r0, #0
 8004662:	e7e0      	b.n	8004626 <_raise_r+0x12>

08004664 <raise>:
 8004664:	4b02      	ldr	r3, [pc, #8]	; (8004670 <raise+0xc>)
 8004666:	4601      	mov	r1, r0
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f7ff bfd3 	b.w	8004614 <_raise_r>
 800466e:	bf00      	nop
 8004670:	2000004c 	.word	0x2000004c

08004674 <_kill_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d07      	ldr	r5, [pc, #28]	; (8004694 <_kill_r+0x20>)
 8004678:	2300      	movs	r3, #0
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	f7fc fec1 	bl	8001408 <_kill>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d102      	bne.n	8004690 <_kill_r+0x1c>
 800468a:	682b      	ldr	r3, [r5, #0]
 800468c:	b103      	cbz	r3, 8004690 <_kill_r+0x1c>
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	bd38      	pop	{r3, r4, r5, pc}
 8004692:	bf00      	nop
 8004694:	2000017c 	.word	0x2000017c

08004698 <_getpid_r>:
 8004698:	f7fc beae 	b.w	80013f8 <_getpid>

0800469c <__sread>:
 800469c:	b510      	push	{r4, lr}
 800469e:	460c      	mov	r4, r1
 80046a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a4:	f000 f894 	bl	80047d0 <_read_r>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	bfab      	itete	ge
 80046ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046ae:	89a3      	ldrhlt	r3, [r4, #12]
 80046b0:	181b      	addge	r3, r3, r0
 80046b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046b6:	bfac      	ite	ge
 80046b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80046ba:	81a3      	strhlt	r3, [r4, #12]
 80046bc:	bd10      	pop	{r4, pc}

080046be <__swrite>:
 80046be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c2:	461f      	mov	r7, r3
 80046c4:	898b      	ldrh	r3, [r1, #12]
 80046c6:	05db      	lsls	r3, r3, #23
 80046c8:	4605      	mov	r5, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4616      	mov	r6, r2
 80046ce:	d505      	bpl.n	80046dc <__swrite+0x1e>
 80046d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d4:	2302      	movs	r3, #2
 80046d6:	2200      	movs	r2, #0
 80046d8:	f000 f868 	bl	80047ac <_lseek_r>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	4632      	mov	r2, r6
 80046ea:	463b      	mov	r3, r7
 80046ec:	4628      	mov	r0, r5
 80046ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f2:	f000 b817 	b.w	8004724 <_write_r>

080046f6 <__sseek>:
 80046f6:	b510      	push	{r4, lr}
 80046f8:	460c      	mov	r4, r1
 80046fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fe:	f000 f855 	bl	80047ac <_lseek_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	bf15      	itete	ne
 8004708:	6560      	strne	r0, [r4, #84]	; 0x54
 800470a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800470e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004712:	81a3      	strheq	r3, [r4, #12]
 8004714:	bf18      	it	ne
 8004716:	81a3      	strhne	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__sclose>:
 800471a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471e:	f000 b813 	b.w	8004748 <_close_r>
	...

08004724 <_write_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d07      	ldr	r5, [pc, #28]	; (8004744 <_write_r+0x20>)
 8004728:	4604      	mov	r4, r0
 800472a:	4608      	mov	r0, r1
 800472c:	4611      	mov	r1, r2
 800472e:	2200      	movs	r2, #0
 8004730:	602a      	str	r2, [r5, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f7fc fe9f 	bl	8001476 <_write>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_write_r+0x1e>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	b103      	cbz	r3, 8004742 <_write_r+0x1e>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	2000017c 	.word	0x2000017c

08004748 <_close_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4d06      	ldr	r5, [pc, #24]	; (8004764 <_close_r+0x1c>)
 800474c:	2300      	movs	r3, #0
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fc feab 	bl	80014ae <_close>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_close_r+0x1a>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_close_r+0x1a>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	2000017c 	.word	0x2000017c

08004768 <_fstat_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4d07      	ldr	r5, [pc, #28]	; (8004788 <_fstat_r+0x20>)
 800476c:	2300      	movs	r3, #0
 800476e:	4604      	mov	r4, r0
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	602b      	str	r3, [r5, #0]
 8004776:	f7fc fea6 	bl	80014c6 <_fstat>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d102      	bne.n	8004784 <_fstat_r+0x1c>
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	b103      	cbz	r3, 8004784 <_fstat_r+0x1c>
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	bd38      	pop	{r3, r4, r5, pc}
 8004786:	bf00      	nop
 8004788:	2000017c 	.word	0x2000017c

0800478c <_isatty_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4d06      	ldr	r5, [pc, #24]	; (80047a8 <_isatty_r+0x1c>)
 8004790:	2300      	movs	r3, #0
 8004792:	4604      	mov	r4, r0
 8004794:	4608      	mov	r0, r1
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	f7fc fea5 	bl	80014e6 <_isatty>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d102      	bne.n	80047a6 <_isatty_r+0x1a>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	b103      	cbz	r3, 80047a6 <_isatty_r+0x1a>
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	2000017c 	.word	0x2000017c

080047ac <_lseek_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4d07      	ldr	r5, [pc, #28]	; (80047cc <_lseek_r+0x20>)
 80047b0:	4604      	mov	r4, r0
 80047b2:	4608      	mov	r0, r1
 80047b4:	4611      	mov	r1, r2
 80047b6:	2200      	movs	r2, #0
 80047b8:	602a      	str	r2, [r5, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f7fc fe9e 	bl	80014fc <_lseek>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d102      	bne.n	80047ca <_lseek_r+0x1e>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	b103      	cbz	r3, 80047ca <_lseek_r+0x1e>
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	2000017c 	.word	0x2000017c

080047d0 <_read_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4d07      	ldr	r5, [pc, #28]	; (80047f0 <_read_r+0x20>)
 80047d4:	4604      	mov	r4, r0
 80047d6:	4608      	mov	r0, r1
 80047d8:	4611      	mov	r1, r2
 80047da:	2200      	movs	r2, #0
 80047dc:	602a      	str	r2, [r5, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7fc fe2c 	bl	800143c <_read>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_read_r+0x1e>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_read_r+0x1e>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	2000017c 	.word	0x2000017c

080047f4 <_gettimeofday>:
 80047f4:	4b02      	ldr	r3, [pc, #8]	; (8004800 <_gettimeofday+0xc>)
 80047f6:	2258      	movs	r2, #88	; 0x58
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	f04f 30ff 	mov.w	r0, #4294967295
 80047fe:	4770      	bx	lr
 8004800:	2000017c 	.word	0x2000017c

08004804 <_init>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	bf00      	nop
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr

08004810 <_fini>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr
